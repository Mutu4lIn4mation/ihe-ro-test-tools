Class MessageHandlerNAction
    Inherits DvtkHighLevelInterface.Dicom.Threads.MessageHandler
    Dim count As Integer
    Private Sub CopyInterRelationAttributes(ByVal requestMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, ByVal responseMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage)

        ' Fill Affected SOP Instance UID  (0000,1000)
        Dim value As String = requestMessage(Tags.RequestedSOPInstanceUID).Values.Item(0)
        responseMessage.Set(Tags.AffectedSOPInstanceUID, DvtkData.Dimse.VR.UI, value)

        ' Copy  Unified Procedure Step State  (0074,1000)
        value = requestMessage(Tags.ProcedureStepState).Values.Item(0)
        responseMessage.Set(Tags.ProcedureStepState, DvtkData.Dimse.VR.CS, value)

    End Sub

    'DimseCommand.NACTIONRSP
    Public Overrides Function HandleNActionRequest(ByVal dicomMessage As DicomMessage) As Boolean

        Dim requestedSOPClassUID As String = dicomMessage.CommandSet.Item(Tags.RequestedSOPClassUID).Values(0)
        If requestedSOPClassUID = SOPclass.UnifiedProcedureStepPushSOPClassUID.ToString() Then

            Dim dicomMessageToSend As DicomMessage = MessageHandlerHelper.CreateResponseMessage(DvtkData.Dimse.DimseCommand.NACTIONRSP, dicomMessage)
            'CopyInterRelationAttributes(dicomMessage, dicomMessageToSend)
            Dim value As String = dicomMessage(Tags.RequestedSOPInstanceUID).Values.Item(0)
            dicomMessageToSend.Set(Tags.AffectedSOPInstanceUID, DvtkData.Dimse.VR.UI, value)

            Dim UPSdicomFile As DvtkHighLevelInterface.Dicom.Files.DicomFile = Nothing

            If Not dicomMessage.DataSet(Tags.ProcedureStepState).Values(0).Equals("IN PROGRESS") Then
                If (dicomMessage.DataSet.Exists(Tags.TransactionUID)) Then
                    Dim TransactionUID As String = dicomMessage.DataSet(Tags.TransactionUID).Values.Item(0)
                    UPSdicomFile = ReferenceDataSet.GetInstance().GetAvailebleUPS(value, TransactionUID)
                Else
                    Dim n As Integer = &HC301
                    dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                    dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 
                End If
            Else
                UPSdicomFile = ReferenceDataSet.GetInstance().GetAvailebleUPS(value)
            End If

            If Not UPSdicomFile Is Nothing Then

                If UPSdicomFile.DataSet(Tags.ProcedureStepState).Values(0).Equals("SCHEDULED") Then

                    If dicomMessage.DataSet(Tags.ProcedureStepState).Values(0).Equals("IN PROGRESS") Then
                        'DataSetHandler.SaveDatasetToFile(dicomMessage.DataSet, DataSetHandler.UPSCacheXMLFileName, "N-ACTION-REQ-RO-19-" + (count + 1).ToString())
                        count = count + 1
                        dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                        dicomMessageToSend.Set(Tags.StatusCommandElement, US, 0) ' Status 
                        DataSetHandler.SetCacheUPS_NewStatus(dicomMessage, "IN PROGRESS")
                        'dicomMessageToSend.Set(Tags.ProcedureStepState, CS, "IN PROGRESS")

                    Else

                        Dim n As Integer = &HC310
                        dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                        dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 

                    End If

                ElseIf (UPSdicomFile.DataSet(Tags.ProcedureStepState).Values(0).Equals("IN PROGRESS")) Then

                    If dicomMessage.DataSet(Tags.ProcedureStepState).Values(0).Equals("IN PROGRESS") Then
                        'UPS already IN PROGRESS, Send error status back
                        Dim n As Integer = &HC302
                        dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                        dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 

                    ElseIf dicomMessage.DataSet(Tags.ProcedureStepState).Values(0).Equals("COMPLETED") Then

                        'check all Completed attributes are present

                        If (UPSdicomFile.DataSet.Exists(Tags.UPSPerformedProcedureSequencePerformedProcedureStepStartDateTime) _
                           And UPSdicomFile.DataSet.Exists(Tags.UPSPerformedProcedureSequenceScheduledProcedureStepEndDateTime) _
                           And UPSdicomFile.DataSet.Exists(Tags.UPSPerformedProcedurePerformedWorkitemCodeSequence)) Then

                            If Not (UPSdicomFile.DataSet(Tags.UPSPerformedProcedureSequencePerformedProcedureStepStartDateTime).Values(0) = "" _
                                And Not UPSdicomFile.DataSet(Tags.UPSPerformedProcedureSequenceScheduledProcedureStepEndDateTime).Values(0) = "" _
                                And UPSdicomFile.DataSet(Tags.UPSProgressInformationUnifiedProcedureStepProgress).Values(0).ToString() = "100") Then

                                dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                                dicomMessageToSend.Set(Tags.StatusCommandElement, US, 0) ' Status 
                                If (UPSdicomFile.DataSet.Exists(Tags.UPSProgressInformationUnifiedProcedureStepProgress)) Then
                                    'dicomMessageToSend.Set(Tags.UPSProgressInformationUnifiedProcedureStepProgress, DS, UPSdicomFile.DataSet(Tags.UPSProgressInformationUnifiedProcedureStepProgress).Values(0))
                                Else
                                    'dicomMessageToSend.Set(Tags.UPSProgressInformationUnifiedProcedureStepProgress, DS, "")
                                End If
                                'dicomMessageToSend.Set(Tags.ProcedureStepState, CS, "COMPLETED")
                                DataSetHandler.SetCacheUPS_NewStatus(dicomMessage, "COMPLETED")


                            Else
                                Dim n As Integer = &HC304
                                dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                                dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 
                            End If

                        Else
                            Dim n As Integer = &HC304
                            dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                            dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 
                        End If



                    ElseIf dicomMessage.DataSet(Tags.ProcedureStepState).Values(0).Equals("CANCELED") Then

                        'check all Canceled attributes are present
                        If (UPSdicomFile.DataSet.Exists(Tags.UPSProgressInformationUnifiedProcedureStepCancellationDateTime) _
                           And UPSdicomFile.DataSet.Exists(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodeValue) _
                           And UPSdicomFile.DataSet.Exists(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodingSchemeDesignator) _
                           And UPSdicomFile.DataSet.Exists(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodeMeaning)) Then

                            If Not (UPSdicomFile.DataSet(Tags.UPSProgressInformationUnifiedProcedureStepCancellationDateTime).Values(0) = "" _
                                And Not UPSdicomFile.DataSet(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodeValue).Values(0) = "" _
                                And Not UPSdicomFile.DataSet(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodingSchemeDesignator).Values(0) = "" _
                                And Not UPSdicomFile.DataSet(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodeMeaning).Values(0) = "") Then

                                dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                                dicomMessageToSend.Set(Tags.StatusCommandElement, US, 0) ' Status 
                                'dicomMessageToSend.Set(Tags.ProcedureStepState, CS, "CANCELED")
                                If (UPSdicomFile.DataSet.Exists(Tags.UPSProgressInformationUnifiedProcedureStepProgress)) Then
                                    'dicomMessageToSend.Set(Tags.UPSProgressInformationUnifiedProcedureStepProgress, DS, UPSdicomFile.DataSet(Tags.UPSProgressInformationUnifiedProcedureStepProgress).Values(0))
                                Else
                                    'dicomMessageToSend.Set(Tags.UPSProgressInformationUnifiedProcedureStepProgress, DS, "")
                                End If

                                DataSetHandler.SetCacheUPS_NewStatus(dicomMessage, "CANCELED")
                            Else
                                Dim n As Integer = &HC304
                                dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                                dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 
                            End If

                        Else
                            Dim n As Integer = &HC304
                            dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                            dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 
                        End If

                    End If

                ElseIf (UPSdicomFile.DataSet(Tags.ProcedureStepState).Values(0).Equals("COMPLETED")) Then

                    If dicomMessage.DataSet(Tags.ProcedureStepState).Values(0).Equals("COMPLETED") Then
                        'UPS already COMPLETED, Send warning status back
                        Dim n As Integer = &HB306
                        dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                        dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 
                    Else
                        Dim n As Integer = &HC300
                        dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                        dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status
                    End If

                ElseIf (UPSdicomFile.DataSet(Tags.ProcedureStepState).Values(0).Equals("CANCELED")) Then

                    If dicomMessage.DataSet(Tags.ProcedureStepState).Values(0).Equals("CANCELED") Then
                        'UPS already CANCELED, Send warning status back
                        Dim n As Integer = &HB304
                        dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                        dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 
                    Else
                        Dim n As Integer = &HC300
                        dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                        dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status
                    End If

                End If

                'dicomMessageToSend.Set(Tags.TransactionUID, UI, dicomMessage(Tags.TransactionUID).Values.Item(0))
            End If

            Send(dicomMessageToSend, dicomMessage.EncodedPresentationContextID)

            Return True

        Else
            Throw New Exception(String.Format("Handling N-ACTION RQ of Requested SOP Class UID '{0}' not supported", requestedSOPClassUID))
        End If

    End Function

    Private Function getTransactionUID(ByVal rspMessage As DicomMessage) As String

        Dim retVal As String = ""
        Dim rspSopInstanceUID As String = rspMessage.CommandSet(Tags.RequestedSOPInstanceUID).Values(0)

        For i As Integer = 1 To 4
            'load C-Find-Rsp from refDataSet
            Dim cmpSopInstanceUID As String = DataSetHandler.getAttributeValueFromDataSet(DataSetHandler.UPSMessagesXMLFileName, "C-FIND-RSP" + i.ToString, Tags.SOPInstanceUID)
            If (rspSopInstanceUID = cmpSopInstanceUID) Then
                retVal = DataSetHandler.getAttributeValueFromDataSet(DataSetHandler.UPSMessagesXMLFileName, "N-ACTION-RSP" + i.ToString, Tags.TransactionUID)
                Exit For
            End If
        Next
        Return retVal

    End Function

End Class