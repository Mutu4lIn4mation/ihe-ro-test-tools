#If Not DVT_INTERPRETS_SCRIPT Then
Imports System.Collections.Generic
#End If

' Transaction RO-17 (Worklist Query for Positioning and Delivery) class
Class RO_17_Transaction
    Inherits Transaction

    Private ro17IODType As IODType = Nothing

    'Constructor
    Public Sub New()

        MyBase.New("RO-17", "Worklist Query for Positioning and Delivery", IODType.UnifiedProcedureStepPull, True)
        ro17IODType = IODType.UnifiedProcedureStepPull

    End Sub

    'method which returns the related reference data messages belonging to this transaction
    Protected Overrides Function GetTransactionReferenceDataMessages() As System.Collections.ArrayList
        Dim datasetMessages As ArrayList = New ArrayList()
        Dim referenceData As ReferenceDataSet = ReferenceDataSet.GetInstance()

        'add the structure set message to the arraylist
        datasetMessages.Add(referenceData.GetUnifiedProcedureStepPull_CFIND_REQ)

        'return the array with dataset(s)
        Return datasetMessages
    End Function

    ' This function returns all common rules that apply on a request of this transaction
    Public Function GetCommonTransactionRulesForRequest() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        '(0x00741000) R  Unified Procedure Step State	
        m_rules.Add(New IsRequiredRule(Tags.ProcedureStepState, ro17IODType, ErrorSeverity.RuleError))
        m_rules.Add(New ValueRule(Tags.ProcedureStepState, "SCHEDULED", ro17IODType, ErrorSeverity.RuleError))

        '(0x00404025) scheduled Station name Code Sequence must be present
        m_rules.Add(New IsRequiredRule(Tags.ScheduledStationNameCodeSequence, ro17IODType, ErrorSeverity.RuleError))

        'm_rules.Add(New IsRequiredRule(Tags.ScheduledStationCodeValue, ro17IODType, ErrorSeverity.RuleError))
        'm_rules.Add(New IsRequiredRule(Tags.ScheduledStationCodingSchemeDesignator, ro17IODType, ErrorSeverity.RuleError))
        m_rules.Add(New IsRequiredRule(Tags.ScheduledProcedureStepStartDateandTime, ro17IODType, ErrorSeverity.RuleError))

        '(0x00100010) Patient’s Name O
        m_rules.Add(New OptionalRule(Tags.PatientName, ro17IODType, ErrorSeverity.RuleInfo))
        'm_rules.Add(New InterOperabilityRule(Tags.PatientName, Tags.PatientName, DataSetHandler.UPSMessagesXMLFileName, "C-FIND-RSP1", True, ro17IODType, ErrorSeverity.RuleError))

        '(0x00100020) Patient ID O
        m_rules.Add(New OptionalRule(Tags.PatientID, ro17IODType, ErrorSeverity.RuleInfo))
        'm_rules.Add(New InterOperabilityRule(Tags.PatientID, Tags.PatientID, DataSetHandler.UPSMessagesXMLFileName, "C-FIND-RSP1", True, ro17IODType, ErrorSeverity.RuleError))

        Return m_rules

    End Function

    ' This function returns all common rules that apply on a response of this transaction
    Public Function GetCommonTransactionRulesForResponse(ByVal beginDateTimeRange As DateTime, ByVal endDateTimeRange As DateTime, ByVal requestDataset As DvtkHighLevelInterface.Dicom.Other.DataSet) As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        ' Some rules need the dataset used in the request.
        Dim referenceData As ReferenceDataSet = ReferenceDataSet.GetInstance
        referenceData.LoadNewDataSet(DataSetHandler.UPSMessagesXMLFileName)
        Dim msg As Dicom.Messages.DicomMessage = DirectCast(TransactionDataMessages(0), DicomMessage)

        '(0000,0009) Status Command Element must be of type pending in the 4 received responses
        'FF00 hexadecimal = 65280 
        m_rules.Add(New ValueRule(Tags.StatusCommandElement, "65280", ro17IODType, ErrorSeverity.RuleError))

        '(0x00081016) R  SOP Class UID
        m_rules.Add(New HasValueRule(Tags.SOPClassUID, ro17IODType, ErrorSeverity.RuleError))

        '(0x00080018) R  SOP Instance UID
        m_rules.Add(New HasValueRule(Tags.SOPInstanceUID, ro17IODType, ErrorSeverity.RuleError))

        '(0x00741000) R  Unified Procedure Step State
        m_rules.Add(New IsRequiredRule(Tags.ProcedureStepState, ro17IODType, ErrorSeverity.RuleError))
        m_rules.Add(New ValueRule(Tags.ProcedureStepState, "SCHEDULED", ro17IODType, ErrorSeverity.RuleError))

        '(0x00741204) R  Procedure Step Label
        m_rules.Add(New HasValueRule(Tags.ProcedureStepLabel, ro17IODType, ErrorSeverity.RuleError))

        '(0x00404025) R Scheduled Station Name Code Sequence
        If requestDataset.Exists(Tags.ScheduledStationNameCodeSequence) Then
            If requestDataset.GetitemCount(Tags.ScheduledStationNameCodeSequence) > 0 Then

                If (requestDataset.Exists(Tags.ScheduledStationCodeValue)) Then
                    Dim stationCodeValue As String = requestDataset(Tags.ScheduledStationCodeValue).Values(0)
                    If stationCodeValue = "" Then
                        m_rules.Add(New HasValueRule(Tags.ScheduledStationCodeValue, ro17IODType, ErrorSeverity.RuleError))
                    Else
                        m_rules.Add(New ValueRule(Tags.ScheduledStationCodeValue, stationCodeValue, ro17IODType, ErrorSeverity.RuleError))
                    End If
                End If

                If (requestDataset.Exists(Tags.ScheduledStationCodingSchemeDesignator)) Then
                    Dim stationCodeScheme As String = requestDataset(Tags.ScheduledStationCodingSchemeDesignator).Values(0)
                    If stationCodeScheme = "" Then
                        m_rules.Add(New HasValueRule(Tags.ScheduledStationCodingSchemeDesignator, ro17IODType, ErrorSeverity.RuleError))
                    Else
                        m_rules.Add(New ValueRule(Tags.ScheduledStationCodingSchemeDesignator, stationCodeScheme, ro17IODType, ErrorSeverity.RuleError))
                    End If
                End If

                If (requestDataset.Exists(Tags.ScheduledStationCodeMeaning)) Then
                    Dim stationCodeMeaning As String = requestDataset(Tags.ScheduledStationCodeMeaning).Values(0)
                    If stationCodeMeaning = "" Then
                        m_rules.Add(New HasValueRule(Tags.ScheduledStationCodeMeaning, ro17IODType, ErrorSeverity.RuleError))
                    Else
                        m_rules.Add(New ValueRule(Tags.ScheduledStationCodeMeaning, stationCodeMeaning, ro17IODType, ErrorSeverity.RuleError))
                    End If
                End If
            End If
        End If


        '(0x00404005) R Scheduled Procedure Step Start Date and Time
        m_rules.Add(New IsRequiredRule(Tags.ScheduledProcedureStepStartDateandTime, ro17IODType, ErrorSeverity.RuleError))
        m_rules.Add(New DateTimeRule(Tags.ScheduledProcedureStepStartDateandTime, beginDateTimeRange, endDateTimeRange, ro17IODType, ErrorSeverity.RuleError))

        '(0x00404018) R Scheduled Workitem Code Sequence
        m_rules.Add(New IsRequiredRule(Tags.ScheduledWorkitemCodeValue, ro17IODType, ErrorSeverity.RuleError))
        m_rules.Add(New IsRequiredRule(Tags.ScheduledWorkitemCodingSchemeDesignator, ro17IODType, ErrorSeverity.RuleError))
        m_rules.Add(New IsRequiredRule(Tags.ScheduledWorkitemCodeMeaning, ro17IODType, ErrorSeverity.RuleError))

        m_rules.Add(New ConditionalRequiredValueRule(Tags.ScheduledProcessingParametersValueType, "TEXT", Tags.ScheduledWorkitemCodeValue, "121726", ro17IODType, ErrorSeverity.RuleError))
        m_rules.Add(New ConditionalRequiredValueRule(Tags.ScheduledProcessingParameters_ConceptNameCodeSequence_CodeValue, "121740", Tags.ScheduledWorkitemCodeValue, "121726", ro17IODType, ErrorSeverity.RuleError))
        m_rules.Add(New ConditionalRequiredValueRule(Tags.ScheduledProcessingParameters_ConceptNameCodeSequence_CodingSchemeDesignator, "DCM", Tags.ScheduledWorkitemCodeValue, "121726", ro17IODType, ErrorSeverity.RuleError))
        m_rules.Add(New ConditionalRequiredValueRule(Tags.ScheduledProcessingParameters_ConceptNameCodeSequence_CodeMeaning, "Treatment Delivery Type", Tags.ScheduledWorkitemCodeValue, "121726", ro17IODType, ErrorSeverity.RuleError))

        ''(0x00741210) R Scheduled Processing Parameters Sequence
        'm_rules.Add(New IsRequiredRule(Tags.ScheduledProcessingParametersValueType, ro17IODType, ErrorSeverity.RuleError))
        'm_rules.Add(New ValueRule(Tags.ScheduledProcessingParametersValueType, "TEXT", ro17IODType, ErrorSeverity.RuleError))

        'm_rules.Add(New IsRequiredRule(Tags.ScheduledProcessingParameters_ConceptNameCodeSequence_CodeValue, ro17IODType, ErrorSeverity.RuleError))
        'm_rules.Add(New ValueRule(Tags.ScheduledProcessingParameters_ConceptNameCodeSequence_CodeValue, "121740", ro17IODType, ErrorSeverity.RuleError))

        'm_rules.Add(New IsRequiredRule(Tags.ScheduledProcessingParameters_ConceptNameCodeSequence_CodingSchemeDesignator, ro17IODType, ErrorSeverity.RuleError))
        'm_rules.Add(New ValueRule(Tags.ScheduledProcessingParameters_ConceptNameCodeSequence_CodingSchemeDesignator, "DCM", ro17IODType, ErrorSeverity.RuleError))

        'm_rules.Add(New IsRequiredRule(Tags.ScheduledProcessingParameters_ConceptNameCodeSequence_CodeMeaning, ro17IODType, ErrorSeverity.RuleError))
        'm_rules.Add(New ValueRule(Tags.ScheduledProcessingParameters_ConceptNameCodeSequence_CodeMeaning, "Treatment Delivery Type", ro17IODType, ErrorSeverity.RuleError))

        '(0x0020000D) R  Study Instance UID
        m_rules.Add(New HasValueRule(Tags.StudyInstanceUID, ro17IODType, ErrorSeverity.RuleError))

        '(0x00100010) R  Patients name
        Dim patientName As String = requestDataset(Tags.PatientName).Values(0)
        If patientName = "" Then
            m_rules.Add(New HasValueRule(Tags.PatientName, ro17IODType, ErrorSeverity.RuleError))
        Else
            Dim convertedPatientName As String = patientName.Replace(" ", "^")
            m_rules.Add(New ValueRule(Tags.PatientName, convertedPatientName, ro17IODType, ErrorSeverity.RuleError))
        End If

        '(0x00100020) R  Patients ID
        Dim patientID As String = requestDataset(Tags.PatientID).Values(0)
        If patientID = "" Then
            m_rules.Add(New HasValueRule(Tags.PatientID, ro17IODType, ErrorSeverity.RuleError))
        Else
            m_rules.Add(New ValueRule(Tags.PatientID, patientID, ro17IODType, ErrorSeverity.RuleError))
        End If

        'Tags.IisTypeOfInstances verplicht als input information seq aanwezig is

        Return m_rules

    End Function

    Public Function GetTransactionRulesForResponse() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        '(0x00404018) R Scheduled Workitem Code Sequence
        m_rules.Add(New IsRequiredRule(Tags.ScheduledWorkitemCodeSequence, ro17IODType, ErrorSeverity.RuleError))

        m_rules.Add(New IsRequiredRule(Tags.ScheduledWorkitemCodeValue, ro17IODType, ErrorSeverity.RuleError))
        'm_rules.Add(New ValueInRangeRule(Tags.ScheduledWorkitemCodeValue, 121702, 121711, ro17IODType, ErrorSeverity.RuleError))

        m_rules.Add(New IsRequiredRule(Tags.ScheduledWorkitemCodingSchemeDesignator, ro17IODType, ErrorSeverity.RuleError))
        m_rules.Add(New ValueRule(Tags.ScheduledWorkitemCodingSchemeDesignator, "DCM", ro17IODType, ErrorSeverity.RuleError))

        '(0x00080054) retrieveAETitle
        Dim sutSettingTMS As SUTAESettingWrapper = TestToolConfiguration.GetInstance().GetSUTAEConfiguration(New TMSActor().Id, CMOVERQ)
        Dim sutSettingOST As SUTAESettingWrapper = TestToolConfiguration.GetInstance().GetSUTAEConfiguration(New OSTActor().Id, CMOVERQ)

        Dim values(1) As String
        values(0) = sutSettingTMS.AETitle
        values(1) = sutSettingOST.AETitle

        m_rules.Add(New SequenceLoopRule(Tags.InputInformationSequence, New ValueListRule(Tags.retrieveAETitle1, values, ro17IODType, ErrorSeverity.RuleError)))

        m_rules.Add(New SequenceLoopRule(Tags.InputInformationSequence, New IsRequiredRule(Tags.IisTypeOfInstances, ro17IODType, ErrorSeverity.RuleError)))

        Dim valueList As String() = {"TREATMENT", "CONTINUATION"}
        m_rules.Add(New ConditionalRequiredValueListRule(Tags.ScheduledProcessingParametersTextValue, valueList, Tags.ScheduledWorkitemCodeValue, "121726", ro17IODType, ErrorSeverity.RuleError))

        Return m_rules

    End Function

End Class
