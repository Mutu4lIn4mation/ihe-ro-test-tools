Public Class Rule

#Region "Constructors"

    Public Sub New(ByVal name As String, ByVal iodTypeRule As IODType, ByVal errorSeverity As ErrorSeverity)

        m_name = name
        m_iodTypeRule = iodTypeRule
        m_errorSeverity = errorSeverity

    End Sub

#End Region

#Region "Private Fields"

    Private m_name As String
    Private m_iodTypeRule As IODType
    Private m_errorSeverity As ErrorSeverity

    Private m_conditionFalseText As String = String.Empty
    Private m_conditionTrueText As String = String.Empty
    Private m_IsValid As Boolean = False

#End Region

#Region "Public Properties"

    Public ReadOnly Property Name() As String
        Get
            Return m_name
        End Get
    End Property

    Public ReadOnly Property IODTypeRule() As IODType
        Get
            Return m_iodTypeRule
        End Get
    End Property

    Public ReadOnly Property ErrSeverity() As ErrorSeverity
        Get
            Return m_errorSeverity
        End Get
    End Property

    Public ReadOnly Property IsValid() As Boolean
        Get
            Return m_IsValid
        End Get
    End Property

    Public ReadOnly Property ConditionFalseText() As String
        Get
            Return m_conditionFalseText
        End Get
    End Property

    Public ReadOnly Property ConditionTrueText() As String
        Get
            Return m_conditionTrueText
        End Get
    End Property

#End Region

#Region "Protected Methods"

    Protected Sub SetError(ByVal errorText As String)
        m_conditionFalseText = m_name + " - " + errorText
        m_IsValid = False
        m_errorSeverity = m_errorSeverity
    End Sub


    Protected Sub SetValid(ByVal validText As String)
        m_conditionTrueText = m_name + " - " + validText
        m_IsValid = True
    End Sub

    Protected Function TagToString(ByRef attribute As DvtkHighLevelInterface.Dicom.Other.Attribute) As String
        Dim theString As String
        Dim groupNumber As Int64
        Dim ElementNumber As Int64

        groupNumber = System.Convert.ToInt64(attribute.GroupNumber())
        ElementNumber = System.Convert.ToInt64(attribute.ElementNumber())

        theString = String.Format("({0},{1})", groupNumber.ToString("X"), ElementNumber.ToString("X"))

        Return theString

    End Function

    Protected Function FormatDVTTagToDicomTag(ByVal DVTTag As String) As String
        'remove spaces eventhough we are not expecting any
        DVTTag = DVTTag.Trim()
        Return "(" + DVTTag.Substring(2, 4) + "," + DVTTag.Substring(6, 4) + ")"
    End Function

    Protected Function IsUniqueInSequence(ByRef attributeTagSequence As String, ByVal sequenceAttribute As DvtkHighLevelInterface.Dicom.Other.Attribute) As Boolean

        Dim i As Integer
        Dim isUnique As Boolean = True

        Dim seqItem1 As DvtkHighLevelInterface.Dicom.Other.SequenceItem = Nothing
        Dim seqItem2 As DvtkHighLevelInterface.Dicom.Other.SequenceItem = Nothing
        For i = 1 To sequenceAttribute.ItemCount()
            seqItem1 = sequenceAttribute.GetItem(i)
            If seqItem1.Exists(attributeTagSequence) Then
                Dim j As Integer
                For j = i + 1 To sequenceAttribute.ItemCount()
                    seqItem2 = sequenceAttribute.GetItem(j)
                    If seqItem2.Exists(attributeTagSequence) Then
                        'Values match, so value is not unique
                        If seqItem1(attributeTagSequence).Values.Equals(seqItem2(attributeTagSequence).Values) Then
                            Return False
                        End If
                    End If
                Next
            End If
        Next
        Return isUnique

    End Function

    Protected Function IsValueUniqueInSequence(ByRef attributeTag As String, ByVal values As String, ByVal sequenceAttribute As DvtkHighLevelInterface.Dicom.Other.Attribute) As ValueUniquePresent

        Dim i As Integer
        Dim isValueUnique As ValueUniquePresent
        Dim valueCounter As Integer = 0

        isValueUnique = ValueUniquePresent.isNotUnique
        Dim seqItem As DvtkHighLevelInterface.Dicom.Other.SequenceItem = Nothing
        For i = 1 To sequenceAttribute.ItemCount()
            seqItem = sequenceAttribute.GetItem(i)
            If seqItem.Exists(attributeTag) Then
                If seqItem(attributeTag).Values(0).Equals(values) Then
                    valueCounter = valueCounter + 1
                End If
            End If
        Next

        If valueCounter = 0 Then
            isValueUnique = ValueUniquePresent.isNotPresent
        ElseIf valueCounter = 1 Then
            isValueUnique = ValueUniquePresent.isUnique
        End If

        Return isValueUnique

    End Function

    Protected Function ConvertToDouble(ByVal stringDouble As String) As Double
        Dim stringDoubleEU As String
        Dim doubleValue As Double
        Dim doubleValueEU As Double

        stringDoubleEU = stringDouble.Replace(".", ",")
        Try
            doubleValue = System.Convert.ToDouble(stringDouble)
        Catch ex As System.Exception
            doubleValue = 100000.0
        End Try
        Try
            doubleValueEU = System.Convert.ToDouble(stringDoubleEU)
        Catch ex As System.Exception
            doubleValueEU = 100000.0
        End Try

        If Math.Abs(doubleValue) < Math.Abs(doubleValueEU) Then
            Return doubleValue
        Else
            Return doubleValueEU
        End If

    End Function

#End Region

#Region "Public Methods"

    Public Function Report() As Boolean
        Dim ruleReported As Boolean = True

        If IsValid = False Then
            Reporter.GetInstance.Report(m_conditionFalseText, m_errorSeverity)
        Else
            Reporter.GetInstance.Report(m_conditionTrueText, ErrorSeverity.RuleInfo)
        End If

        Return ruleReported
    End Function


#End Region




End Class