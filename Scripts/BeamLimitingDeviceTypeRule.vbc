Class BeamLimitingDeviceTypeRule
    Inherits AttributeRule
    ''' <summary>
    ''' This rule checks how many device types there are in the RT Plan and of which type these are.
    ''' The scenario determines what check is being done.
    ''' </summary>
    ''' <param name="scenario"></param>
    ''' <param name="iodType"></param>
    ''' <param name="severity"></param>
    ''' <remarks></remarks>

    Public Sub New(ByVal scenario As ARTO_Scenario, ByVal iodType As IODType, ByVal severity As ErrorSeverity)

        MyBase.New("BeamLimitingDeviceTypeRule", Tags.RTBeamLimitingDeviceType, iodType, severity)
        m_scenario = scenario
    End Sub
    'Type of beam limiting device (collimator).
    'Enumerated Values:
    'X = symmetric jaw pair in IEC X direction
    'Y = symmetric jaw pair in IEC Y direction
    'ASYMX = asymmetric jaw pair in IEC X direction
    'ASYMY = asymmetric pair in IEC Y direction
    'MLCX = multileaf (multi-element) jaw pair in IEC X direction
    'MLCY = multileaf (multi-element) jaw pair in IEC Y direction

    Private m_scenario As ARTO_Scenario

    Public Overrides Sub ApplyRule(ByRef dicomMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, ByVal iodType As IODType)

        If iodType = IODTypeRule Then
            Dim message As String = ""
            If Not dicomMessage.Exists(Tags.BeamLimitingDeviceSequence) Then
                message = "The attribute:'" + Tags.GetTagName(Tags.BeamLimitingDeviceSequence) + "' (" + Tags.BeamLimitingDeviceSequence + ") is not present"
                Me.SetValid(message)
            Else
                Dim itemTag As String = ""
                Dim items As Integer = 0 'counter

                Dim NrOfSYMs As Integer = 0  'symetric jaw pairs    (X, Y)
                Dim NrOfMLCs As Integer = 0  'multileaf             (MLCX, MLCY)
                Dim NrOfASYMs As Integer = 0 'asymetric jaw pairs   (ASYMX, ASYMY)
                Dim NrOfJAWs As Integer = 0 ' total JAW's

                ' count the number of different types
                Dim NrOfItems As Integer = dicomMessage.DataSet.GetitemCount(Tags.BeamLimitingDeviceSequence)
                For items = 1 To NrOfItems
                    If dicomMessage.Exists(m_TagSequence) Then
                        'raise tag
                        itemTag = getItemInSQTag(items, Tags.BeamLimitingDeviceSequence)
                        If dicomMessage(itemTag).Values.Item(0) = "MLCX" Or dicomMessage(itemTag).Values.Item(0) = "MLCY" Then
                            NrOfMLCs = NrOfMLCs + 1
                        Else
                            If dicomMessage(itemTag).Values.Item(0) = "ASYMX" Or dicomMessage(itemTag).Values.Item(0) = "ASYMY" Then
                                NrOfASYMs = NrOfASYMs + 1
                            Else
                                NrOfSYMs = NrOfSYMs + 1
                            End If
                        End If
                    End If
                Next
                NrOfJAWs = NrOfASYMs + NrOfSYMs

                'validate the results, the scenario determines what the result should be
                Select Case m_scenario
                    Case ARTO_Scenario.BasicStaticBeam, ARTO_Scenario.ArcBeam, ARTO_Scenario.StaticElectronBeam, ARTO_Scenario.StereotacticBeam, ARTO_Scenario.StereotacticArcBeam, ARTO_Scenario.PhotonApplicatorArcBeam, ARTO_Scenario.PhotonApplicatorBeam
                        message = "The beam limiting device type contains " + NrOfASYMs.ToString + " JAW types (2 should be present) and " + NrOfMLCs.ToString + " MLC types (none should be present)."
                        If (NrOfJAWs = 2) And (NrOfMLCs = 0) Then
                            Me.SetValid(message)
                        Else
                            Me.SetError(message)
                        End If
                    Case ARTO_Scenario.HardWedgeBeam, ARTO_Scenario.MotorizedWedgeBeam, ARTO_Scenario.VirtualWedgeBeam, ARTO_Scenario.ConformalArcBeam, ARTO_Scenario.MLCVariableApertureArcBeam
                        message = "The beam limiting device type contains " + NrOfASYMs.ToString + " JAW types (at least 2 should be present, or at least 1 if MLC is present) and " + NrOfMLCs.ToString + " MLC types (max=1)."
                        If (((NrOfJAWs > 0) And (NrOfMLCs = 1)) Or ((NrOfJAWs > 1) And (NrOfMLCs = 0))) Then
                            Me.SetValid(message)
                        Else
                            Me.SetError(message)
                        End If
                    Case ARTO_Scenario.StepAndShootBeam, ARTO_Scenario.SlidingWindowBeam, ARTO_Scenario.IMATVMATBeam, ARTO_Scenario.BasicStaticMLCBeam, ARTO_Scenario.MLCArcBeam, ARTO_Scenario.MLCFixedApertureArcBeam
                        message = "The beam limiting device type contains " + NrOfASYMs.ToString + " JAW types and " + NrOfMLCs.ToString + " MLC types (at least one should be present)."
                        If (NrOfMLCs > 0) Then
                            Me.SetValid(message)
                        Else
                            Me.SetError(message)
                        End If
                    Case Else
                        message = "Unknown scenario used as input. Value: " + m_scenario.ToString + "."
                        Me.SetError(message)
                End Select
                'Reporter, write to results, if there is anything to report
            End If
            Me.Report()
        End If
    End Sub
End Class