Class GridFrameOffsetVectorRule
    Inherits AttributeRule

    Public Sub New(ByVal valueTag As String, ByVal iodType As IODType, ByVal severity As ErrorSeverity)

        MyBase.New("Grid Frame Offset Vector Rule", valueTag, iodType, severity)

    End Sub

    Public Overrides Sub ApplyRule(ByRef dicomMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, ByVal iodType As IODType)
        Dim message As String = ""

        If iodType = IODTypeRule Then

            If Not dicomMessage.Exists(m_TagSequence) Then
                message = "The attribute: '" + Tags.GetTagName(m_TagSequence) + "' (" + m_TagSequence + ") is not present."

            Else
                Dim i As Integer

                Dim gridFrameOffsetVector As Double

                Try
                    gridFrameOffsetVector = Double.Parse(dicomMessage(m_TagSequence).Values.Item(0).ToString())
                Catch ex As System.Exception
                    gridFrameOffsetVector = -1
                End Try

                If Not gridFrameOffsetVector = 0 Then
                    message = "The first value in " + Tags.GetTagName(m_TagSequence) + "' (" + m_TagSequence + ") is not equal to 0."
                ElseIf dicomMessage(m_TagSequence).Values.Count < 2 Then
                    message = "The " + Tags.GetTagName(m_TagSequence) + "' (" + m_TagSequence + ") should have at least two z-position offsets"
                Else
                    Dim failed As Boolean = False
                    Dim increasingEveryStep = IsDirectionIncreasingEveryStep(dicomMessage(m_TagSequence))

                    For i = 1 To dicomMessage(m_TagSequence).Values.Count - 1
                        If increasingEveryStep Then
                            'if the current value is smaller than the previous value the rule fails
                            If ConvertToDouble(dicomMessage(m_TagSequence).Values.Item(i)) < ConvertToDouble(dicomMessage(m_TagSequence).Values.Item(i - 1)) Then
                                failed = True
                                message = "The offset value in " + Tags.GetTagName(m_TagSequence) + "' (" + m_TagSequence + ") is not increasing on every step."
                            End If
                        Else
                            'if the current value is bigger than the previous value the rule fails
                            If ConvertToDouble(dicomMessage(m_TagSequence).Values.Item(i)) > ConvertToDouble(dicomMessage(m_TagSequence).Values.Item(i - 1)) Then
                                failed = True
                                message = "The offset value in " + Tags.GetTagName(m_TagSequence) + "' (" + m_TagSequence + ") is not decreasing on every step."
                            End If
                        End If
                    Next

                    If Not failed Then
                        Dim increaseDecrease = "decrease"
                        If increasingEveryStep Then
                            increaseDecrease = "increase"
                        End If
                        message = "The offset value in " + Tags.GetTagName(m_TagSequence) + "' (" + m_TagSequence + ") appears to be correct. The first value is 0 and the other values " + increaseDecrease + " every step."
                        Me.SetValid(message)
                    End If

                End If
            End If
            If Not Me.IsValid Then
                Me.SetError(message)
            End If
            'Reporter, write to results, if there is anything to report
            Me.Report()
        End If
    End Sub

    ' Determine direction of the grid frame offset vector, first and second point are compared with each other.
    Private Function IsDirectionIncreasingEveryStep(ByVal gridFrameOffsetVector As DvtkHighLevelInterface.Dicom.Other.Attribute) As Boolean
        Dim increasing As Boolean = False
        If ConvertToDouble(gridFrameOffsetVector.Values.Item(1)) > ConvertToDouble(gridFrameOffsetVector.Values.Item(0)) Then
            increasing = True
        End If
        Return increasing
    End Function
End Class