Class EqualToRule
    Inherits AttributeRule

    Public Sub New(ByVal TagSequence As String, ByVal iodType As IODType, ByVal severity As ErrorSeverity, ByVal compareToTagSequence As String)

        MyBase.New("Equal To Rule", TagSequence, iodType, severity)
        m_compareToTagSequence = compareToTagSequence

    End Sub

    Private m_compareToTagSequence As String

    Public Overrides Sub ApplyRule(ByRef dicomMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, ByVal iodType As IODType)

        If iodType = IODTypeRule Then
            Dim message As String

            If Not dicomMessage.DataSet.Exists(m_TagSequence) Then
                message = "The attribute: '" + Tags.GetTagName(m_TagSequence) + "' (" + m_TagSequence + ") is not present."
            ElseIf Not dicomMessage.DataSet.Exists(m_compareToTagSequence) Then
                message = "The attribute: '" + Tags.GetTagName(m_compareToTagSequence) + "' (" + m_compareToTagSequence + ") is not present."
            ElseIf dicomMessage.DataSet(m_TagSequence).Values.Item(0) = dicomMessage.DataSet(m_compareToTagSequence).Values.Item(0) Then
                message = "The attribute: '" + Tags.GetTagName(m_TagSequence) + "' (" + m_TagSequence + ") is equal to the attribute: '" + Tags.GetTagName(m_compareToTagSequence) + "' (" + m_compareToTagSequence + ")."
                Me.SetValid(message)
            Else
                message = "The attribute: '" + Tags.GetTagName(m_TagSequence) + "' (" + m_TagSequence + ") is not equal to the attribute: '" + Tags.GetTagName(m_compareToTagSequence) + "' (" + m_compareToTagSequence + ")."
            End If

            If Not Me.IsValid Then
                Me.SetError(message)
            End If

            'Reporter, write to results, if there is anything to report
            Me.Report()
        End If
    End Sub
End Class