#If Not DVT_INTERPRETS_SCRIPT Then
Imports System.Collections.Generic
#End If

' Beam Transaction (Dosimetric Plan Storage) class
Class BeamTransaction
    Inherits Transaction

    Protected m_IsArchiveScenario As Boolean
    Private m_Scenario As ARTO_Scenario

    Private m_NoHardWedgeModifier As Boolean
    Private m_NoBolusModifier As Boolean
    Private m_NoCompensatorModifier As Boolean
    Private m_NoBlockModifier As Boolean

    Private m_rtPlanLabel As String
    Private m_rtPlanDescription As String

    'Constructor
    Public Sub New(ByVal scen As ARTO_Scenario)

        MyBase.New("RO-4", "Dosimetric Plan Storage", IODType.RTPlanDosimetric, True)
        m_Scenario = scen
        m_IsArchiveScenario = False

    End Sub

    Public Property IsArchiveScenario() As Boolean
        Get
            Return m_IsArchiveScenario
        End Get
        Set(ByVal value As Boolean)
            m_IsArchiveScenario = value
        End Set
    End Property

    'method which returns the related reference data messages belonging to this transaction
    Protected Overrides Function GetTransactionReferenceDataMessages() As System.Collections.ArrayList

        Dim datasetMessages As ArrayList = New ArrayList()

        Dim dicomMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = ReferenceDataSet.GetInstance().GetRTPlanDosimetric(m_Scenario)        'add the structure set message to the arraylist
        Dim numberOfBeams As Integer = dicomMessage.DataSet.GetitemCount(Tags.BeamSequence)
        Dim index As Integer
        Dim SopInstanceIdentifier As Integer = 1


        ' Start description with the name of the testscenario

        'if variables are true, the corresponding modifier has to be removed from the dicommessage
        If m_NoHardWedgeModifier Then

            Dim item As Integer = 0
            'this function loops through the control point sequence to delete the wedge position sequence and its items in there
            For index = 1 To numberOfBeams
                dicomMessage.DataSet.Set(Tags.GetTagNameWithCounter(Tags.NumberOfWedges, index), [IS], 0)
                dicomMessage.DataSet.Delete(Tags.GetTagNameWithCounter(Tags.WedgeSequence, index))

                For item = 1 To dicomMessage.DataSet.GetitemCount(Tags.GetTagNameWithCounter(Tags.ControlPointSequence, index))
                    If dicomMessage.DataSet.Getitem(Tags.GetTagNameWithCounter(Tags.ControlPointSequence, index), item).Exists(Tags.OnlyWedgePositionSequence) Then
                        dicomMessage.DataSet.Getitem(Tags.GetTagNameWithCounter(Tags.ControlPointSequence, index), item).Item(Tags.OnlyWedgePositionSequence).Delete()
                    End If
                Next
            Next index
        Else
            SopInstanceIdentifier = SopInstanceIdentifier + 16
        End If
        If m_NoBolusModifier Then
            For index = 1 To numberOfBeams
                dicomMessage.DataSet.Set(Tags.GetTagNameWithCounter(Tags.NumberOfBoli, index), [IS], 0)
                dicomMessage.DataSet.Delete(Tags.GetTagNameWithCounter(Tags.ReferencedBolusSequence, index))
            Next index
        Else
            SopInstanceIdentifier = SopInstanceIdentifier + 4
        End If
        If m_NoCompensatorModifier Then
            For index = 1 To numberOfBeams
                dicomMessage.DataSet.Set(Tags.GetTagNameWithCounter(Tags.NumberOfCompensators, index), [IS], 0)
                dicomMessage.DataSet.Delete(Tags.GetTagNameWithCounter(Tags.CompensatorSequence, index))
            Next index
        Else
            SopInstanceIdentifier = SopInstanceIdentifier + 2
        End If
        If m_NoBlockModifier Then
            For index = 1 To numberOfBeams
                dicomMessage.DataSet.Set(Tags.GetTagNameWithCounter(Tags.NumberOfBlocks, index), [IS], 0)
                dicomMessage.DataSet.Delete(Tags.GetTagNameWithCounter(Tags.BlockSequence, index))
            Next index
        Else
            SopInstanceIdentifier = SopInstanceIdentifier + 8
        End If

        ' The BeamArchiveScenario needs the original SopInstanceUID
        If (m_IsArchiveScenario = False) Then
            Dim newSopInstanceUID As String = dicomMessage.DataSet(Tags.SOPInstanceUID).Values(0) + "." + SopInstanceIdentifier.ToString
            dicomMessage.DataSet.Set(Tags.SOPInstanceUID, UI, newSopInstanceUID)
            dicomMessage.Set(Tags.AffectedSOPInstanceUID, UI, newSopInstanceUID)
        End If

        'dicomMessage.Set(Tags.RTPLanLabel, SH, m_rtPlanLabel)
        'dicomMessage.Set(Tags.RTPLanDescription, SH, m_rtPlanDescription)

        datasetMessages.Add(dicomMessage)
        'return the array with dataset(s)
        Return datasetMessages

    End Function

    Public Sub RemoveModifiers(ByVal modifiers As IEnumerable(Of Modifier), ByVal optionalModifiers As List(Of Modifier))

        m_rtPlanDescription = "Modifier(s):"
        For Each modifier As Modifier In optionalModifiers

            Select Case modifier

                Case modifier.BlockBeamModifier
                    m_rtPlanDescription = m_rtPlanDescription + " Blo"
                Case modifier.BolusBeamModifier
                    m_rtPlanDescription = m_rtPlanDescription + " Bol"
                Case modifier.CompensatorBeamModifier
                    m_rtPlanDescription = m_rtPlanDescription + " Comp"
                Case modifier.HardWedgeBeamModifier
                    m_rtPlanDescription = m_rtPlanDescription + " HW"
                Case Else
                    Throw New ArgumentException(String.Format("Unknown optional modifier '{0}'", modifier))
            End Select

        Next

        For Each modifier As Modifier In modifiers

            Select Case modifier
                Case modifier.BlockBeamModifier
                    m_NoBlockModifier = True
                    RemoveModifiersFromDescription(" Blo")
                Case modifier.BolusBeamModifier
                    m_NoBolusModifier = True
                    RemoveModifiersFromDescription(" Bol")
                Case modifier.CompensatorBeamModifier
                    m_NoCompensatorModifier = True
                    RemoveModifiersFromDescription(" Comp")
                Case modifier.HardWedgeBeamModifier
                    m_NoHardWedgeModifier = True
                    RemoveModifiersFromDescription(" HW")
                Case Else
                    Throw New ArgumentException(String.Format("Unknown modifier '{0}'", modifier))
            End Select
        Next

        If m_rtPlanDescription.Equals("Modifier(s):") Then
            m_rtPlanDescription = "Modifier(s): None"
        End If

        CreateRTPLanLabel()

    End Sub

    Private Sub RemoveModifiersFromDescription(ByVal removeModifier As String)
        m_rtPlanDescription = Replace(m_rtPlanDescription, removeModifier, "", 1, 1)
    End Sub

    Private Sub CreateRTPLanLabel()
        Dim planDescription As String = m_rtPlanDescription
        If m_Scenario = ARTO_Scenario.BasicStaticMLCBeam Then
            m_rtPlanLabel = "BStatMLC"
        ElseIf m_Scenario = ARTO_Scenario.StereotacticArcBeam Then
            m_rtPlanLabel = "StTacArc"
        ElseIf m_Scenario = ARTO_Scenario.PhotonApplicatorArcBeam Then
            m_rtPlanLabel = "PhAppArc"
        Else
            m_rtPlanLabel = Left(m_Scenario.ToString(), 9)
        End If

        m_rtPlanLabel = m_rtPlanLabel + " "
        planDescription = Replace(planDescription, "Modifier(s):", "", 1, 1)
        planDescription = Replace(planDescription, " Blo", "Bl", 1, 1)
        planDescription = Replace(planDescription, " Bol", "Bo", 1, 1)
        planDescription = Replace(planDescription, " Comp", "C", 1, 1)
        planDescription = Replace(planDescription, " HW", "H", 1, 1)
        planDescription = Replace(planDescription, " None", " None", 1, 1)
        m_rtPlanLabel = m_rtPlanLabel + planDescription
    End Sub
End Class
