Class MessageHandlerCFind
    Inherits DvtkHighLevelInterface.Dicom.Threads.MessageHandler

    Private Sub CopyInterRelationAttributes(ByVal requestMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, ByVal responseMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage)
        Dim value As String = ""

        '(0x00000002)  Affected SOP Class UID
        value = requestMessage(Tags.AffectedSOPClassUID).Values.Item(0)
        responseMessage.Set(Tags.AffectedSOPClassUID, UI, value)

        '(0x00000110)  Message ID Being responded to
        value = requestMessage(Tags.MessageID).Values.Item(0)
        responseMessage.Set(Tags.MessageIDBeingRespondedTo, US, value)

        '(0x00404025) R Scheduled Station Name Code Sequence
        ' Copy >> (0x00080100)  Code Value
        If requestMessage.Exists(Tags.ScheduledStationNameCodeSequence) Then
            If requestMessage.DataSet.GetitemCount(Tags.ScheduledStationNameCodeSequence) > 0 Then
                'If requestMessage.DataSet.Exists(Tags.ScheduledStationCodeValue) Then

                '    responseMessage.Set(Tags.ScheduledStationCodeValue, SH, "121726")
                'End If
                ' Copy >> (0x00080102)  Coding Scheme Designator
                If requestMessage.DataSet.Exists(Tags.ScheduledStationCodingSchemeDesignator) Then

                    responseMessage.Set(Tags.ScheduledStationCodingSchemeDesignator, SH, "DCM")
                End If
                ' Copy >> (0x00080104)  Code Meaning
                If requestMessage.DataSet.Exists(Tags.ScheduledStationCodeMeaning) Then
                    value = requestMessage(Tags.ScheduledStationCodeMeaning).Values.Item(0)
                    responseMessage.Set(Tags.ScheduledStationCodeMeaning, LO, value)
                End If
            End If
        End If
        ' Copy the date and time to the C-FIND response
        If requestMessage.DataSet.Exists(Tags.ScheduledProcedureStepStartDateandTime) Then
            value = requestMessage(Tags.ScheduledProcedureStepStartDateandTime).Values.Item(0)
            Dim ValueSubStrings As String() = value.Split("-"c)
            responseMessage.Set(Tags.ScheduledProcedureStepStartDateandTime, DT, ValueSubStrings(0))
        End If

        ' Study Instance UID
        responseMessage.Set(Tags.StudyInstanceUID, UI, requestMessage(Tags.StudyInstanceUID).Values.Item(0))

        ' Copy the Scheduled Processing Text value to the C-FIND response
        If requestMessage.DataSet.Exists(Tags.ScheduledProcessingParametersTextValue) Then
            value = requestMessage(Tags.ScheduledProcessingParametersTextValue).Values.Item(0)
            responseMessage.Set(Tags.ScheduledProcessingParametersTextValue, DT, value)
        End If

        'TODO: needed for the counterpart, so move:
        '(0x00081150) Referenced SOP Class UID
        'responseMessage.Set(Tags.IisReferencedSOPClassUID, UI, "1.2.840.10008.5.1.4.34.1", "1.2.840.10008.5.1.4.1.1.481.5")


    End Sub

    Private Sub SetInputInformationSequenceData(ByVal requestMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, ByVal responseMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage)
        Dim datasetPath As String = DataSetHandler.GetDataPath(DataSetHandler.UPSDataXMLFileName)
        Dim datasetPathCt As String = DataSetHandler.GetDataPath(DataSetHandler.UPSDataXMLFileName, DataSetHandler.UPSXmlNodeDatasetPathCt)

        Dim dataSetInfo(DataSetHandler.DatasetInfoArrayLength) As String
        Dim datasetInfoList As ArrayList = New ArrayList

        'determine AETitle
        Dim aeTitle As String = DataSetHandler.GetAeTitleFromConfiguration()

        'clear the items in message
        responseMessage.DataSet(Tags.InputInformationSequence).ClearItems()

        'load info about avaliable data sets - including CT data sets
        datasetInfoList = DataSetHandler.LoadUpsDataSetInfo(datasetPath, datasetPathCt, requestMessage)

        'determine study instance id
        Dim studyIUID As String = ""
        For Each dataSetInfo In datasetInfoList
            studyIUID = dataSetInfo(DataSetHandler.DatasetInfoStudyIdx)
            Exit For
        Next

        If Not studyIUID = "" Then
            'store top level study uid
            responseMessage.Set(Tags.StudyInstanceUID, UI, studyIUID)
            'store object level study uid
            'study is present only once - all objects must belong to the same study
            responseMessage.Set(Tags.IisStudyInstanceUID, UI, studyIUID)
        End If


        Dim currentRssSiuid As String = String.Empty
        Dim indexRss As Integer = 0     'we deal with "oneBasedIndex' - incremented later on
        Dim indexRsops As Integer = 0   'we deal with "oneBasedIndex' - incremented later on
        For Each dataSetInfo In datasetInfoList
            If Not currentRssSiuid.Equals(dataSetInfo(DataSetHandler.DatasetInfoSeriesIdx)) Then
                currentRssSiuid = dataSetInfo(DataSetHandler.DatasetInfoSeriesIdx)
                indexRss = indexRss + 1 'increment reference sequence index
                indexRsops = 0          'reset reference sop sequence index
            End If

            'create sequence string for current reference series
            Dim indexedRss As String = Tags.InputInformationSequence + String.Format("[{0}]/", indexRss)
            Dim indexedRssSeriesInstanceUid As String = indexedRss + Tags.SeriesInstanceUID
            'Dim indexedRssApplicationEntityTitle As String = indexedRss + Tags.retrieveAETitleMOVE

            'set current series instance uid
            responseMessage.Set(indexedRssSeriesInstanceUid, UI, currentRssSiuid)
            responseMessage.Set(Tags.retrieveAETitle1, AE, aeTitle)

            'storing dataset of current sop sequence - increment the index
            indexRsops = indexRsops + 1
            Dim indexedRssRsops As String = indexedRss + Tags.ReferencedSOPSequenceMOVE + String.Format("[{0}]/", indexRsops)
            Dim indexedRssRsopsRsopsCuid As String = indexedRssRsops + Tags.ReferencedSOPClassUID
            Dim indexedRssRsopsRsopsIuid As String = indexedRssRsops + Tags.ReferencedSOPInstanceUIDMOVE

            'set current referenced class uid, instance uid
            responseMessage.Set(indexedRssRsopsRsopsCuid, UI, dataSetInfo(DataSetHandler.DatasetInfoClassIdx))
            responseMessage.Set(indexedRssRsopsRsopsIuid, UI, dataSetInfo(DataSetHandler.DatasetInfoInstanceIdx))
        Next
    End Sub

    'DimseCommand.CFINDRSP
    Public Overrides Function HandleCFindRequest(ByVal theDicomMessage As DicomMessage) As Boolean

        Dim affectedSOPClassUID As String = theDicomMessage.CommandSet.Item(Tags.AffectedSOPClassUID).Values(0)
        If affectedSOPClassUID = SOPclass.UnifiedProcedureStepPullSOPClassUID.ToString() Then
            ReferenceDataSet.GetInstance.LoadNewDataSet(DataSetHandler.UPSMessagesXMLFileName)

            Dim index As Integer = 0
            'there were more messages in 2009 project
            'one message should be loaded in 2010 project 
            'and one success message
            For Each message As DicomMessage In ReferenceDataSet.GetInstance().GetUnifiedProcedureStepPull_CFIND_RES()
                'handle response messages generally
                'copy attributes from receive message
                CopyInterRelationAttributes(theDicomMessage, message)

                index = index + 1
                'handle response messages specifically
                If index <= 1 Then
                    'load and store datasets
                    SetInputInformationSequenceData(theDicomMessage, message)

                    'save the updated response message to cache directory
                    DataSetHandler.SaveDatasetToFile(message.DataSet, DataSetHandler.UPSCacheXMLFileName, "C-FIND-RSP")
                End If

                ' send the response message
                Send(message)
            Next

            Return (True)

        Else
            Throw New Exception(String.Format("Handling C-FIND RQ of Affected SOP Class UID '{0}' not supported", affectedSOPClassUID))
        End If

    End Function

End Class
