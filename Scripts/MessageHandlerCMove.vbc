Class MessageHandlerCMove
    Inherits DvtkHighLevelInterface.Dicom.Threads.MessageHandler

    Private m_SendActorId As String
    Private m_ReceiveActorId As String
    Private Shared threadId As Integer = 1

    Public Sub New(ByVal sendActorId As String, ByVal ReceiveActorId As String)
        m_SendActorId = sendActorId
        m_ReceiveActorId = ReceiveActorId

    End Sub

    Private Sub SendPendingCMoveResponse(ByVal pendingdata As CMovePendingData, ByVal theRequestDicomMessage As DicomMessage)

        Dim affected_sop_class_uid As String = theRequestDicomMessage(Tags.AffectedSOPClassUID).Values.Item(0)

        'send the pending C-MOVE Response
        Dim dicomMessageToSend As DicomMessage = New DicomMessage(DvtkData.Dimse.DimseCommand.CMOVERSP)
        dicomMessageToSend.Set(Tags.StatusCommandElement, DvtkData.Dimse.VR.US, &HFF00) ' Status.

        dicomMessageToSend.Set(DvtkData.Dimse.Tag.AFFECTED_SOP_CLASS_UID, UI, affected_sop_class_uid)
        dicomMessageToSend.Set(DvtkData.Dimse.Tag.NUMBER_OF_REMAINING_SUBOPERATIONS, US, pendingdata.GetNumberOfRemainingSubOperations.ToString)
        dicomMessageToSend.Set(DvtkData.Dimse.Tag.NUMBER_OF_COMPLETED_SUBOPERATIONS, US, pendingdata.GetNumberOfCompletedSubOperations.ToString)
        dicomMessageToSend.Set(DvtkData.Dimse.Tag.NUMBER_OF_FAILED_SUBOPERATIONS, US, pendingdata.GetNumberOfFailedSubOperations.ToString)
        dicomMessageToSend.Set(DvtkData.Dimse.Tag.NUMBER_OF_WARNING_SUBOPERATIONS, US, pendingdata.GetNumberOfWarningSubOperations.ToString)

        Send(dicomMessageToSend)

    End Sub

    Private Sub SendLastCMoveResponse(ByVal pendingdata As CMovePendingData, ByVal theRequestDicomMessage As DicomMessage)

        'build the C-MOVE Response
        Dim dicomMessageToSend As DicomMessage = New DicomMessage(DvtkData.Dimse.DimseCommand.CMOVERSP)

        If pendingdata.GetNumberOfFailedSubOperations > 0 Or pendingdata.GetNumberOfWarningSubOperations > 0 Then
            dicomMessageToSend.Set(Tags.StatusCommandElement, DvtkData.Dimse.VR.US, &HB000) ' Status = Success
        Else
            dicomMessageToSend.Set(Tags.StatusCommandElement, DvtkData.Dimse.VR.US, 0) ' Status = Warning
            ' NUMBER_OF_COMPLETED_SUBOPERATIONS tag will not be send here
        End If
        dicomMessageToSend.Set(DvtkData.Dimse.Tag.NUMBER_OF_COMPLETED_SUBOPERATIONS, US, pendingdata.GetNumberOfCompletedSubOperations.ToString)
        dicomMessageToSend.Set(DvtkData.Dimse.Tag.NUMBER_OF_REMAINING_SUBOPERATIONS, US, pendingdata.GetNumberOfRemainingSubOperations.ToString)
        dicomMessageToSend.Set(DvtkData.Dimse.Tag.NUMBER_OF_FAILED_SUBOPERATIONS, US, pendingdata.GetNumberOfFailedSubOperations.ToString)
        dicomMessageToSend.Set(DvtkData.Dimse.Tag.NUMBER_OF_WARNING_SUBOPERATIONS, US, pendingdata.GetNumberOfWarningSubOperations.ToString)

        'send the C-MOVE Response
        Send(dicomMessageToSend)
    End Sub

    'DimseCommand.CMOVERSP
    Public Overrides Function HandleCMoveRequest(ByVal theDicomMessage As DicomMessage) As Boolean

        'Retrieve the settings from configuration
        Dim sutSetting As SUTAESettingWrapper = TestToolConfiguration.GetInstance().GetSUTAEConfiguration(m_SendActorId, CSTORERQ)

        'Retrieve AE title from dicommessage and check with config:
        Dim title As String = theDicomMessage.CommandSet.Item(Tags.MoveDestination).Values(0)

        If Not title = sutSetting.AETitle Then
            Logger.GetInstance().LogMessage(String.Format("Application Entity Title mismatch, AE Title in configuration '{0}' " & _
                                              "not equal to AE Title of received message '{1}'", sutSetting.AETitle, title))
        End If

        'Retrieve images to send from reference dataset (and check with reference dataset?)
        Dim messages As DicomMessageCollection = ReferenceDataSet.GetInstance().GetCStoreMessages(theDicomMessage)

        Dim pendingdata As CMovePendingData = New CMovePendingData(messages.Count)

        For Each messageToSend As DicomMessage In messages

            'start the C-STORE action
            Dim scenarioName As String = TestToolConfiguration.GetInstance.GetCurrentScenario().GetType().Name
            Dim cstoreThreadName As String = String.Format("CSTORE Sender ({0}) {1}", scenarioName, threadId.ToString())
            threadId = threadId + 1
            Dim config As TestToolConfiguration = TestToolConfiguration.GetInstance()

            Dim cstoreSenderThread As SenderThread = New SenderThread(cstoreThreadName, sutSetting, config.GetDVTKAEConfiguration(m_ReceiveActorId))
            cstoreSenderThread.AddMessageToSend(messageToSend)
            cstoreSenderThread.Start()
            cstoreSenderThread.WaitForCompletion()

            Dim lastResponse As DicomProtocolMessage

            If cstoreSenderThread.ReceivedMessages.Count > 0 Then
                lastResponse = cstoreSenderThread.ReceivedMessages(cstoreSenderThread.ReceivedMessages.Count - 1)
            Else
                Throw New Exception(String.Format("C-STORE thread '{0}' didn't receive any C-STORE responses", cstoreThreadName))
            End If

            Select Case GetStatus(lastResponse.DicomMessage)

                Case 0 'SUCCESS
                    pendingdata.IncrementCompleted()
                Case &HB000 'WARNING
                    pendingdata.IncrementWarning()
                Case &HFF00 'PENDING
                    'do nothing
                Case Else 'ERROR
                    pendingdata.IncrementFailed()

            End Select

            SendPendingCMoveResponse(pendingdata, theDicomMessage)

        Next

        'send the last C-MOVE Response
        SendLastCMoveResponse(pendingdata, theDicomMessage)

        Return True

    End Function


    Private Function GetStatus(ByVal rspMessage As DicomMessage) As Integer

        Dim statusString As String = rspMessage.CommandSet(Tags.StatusCommandElement).Values(0)
        Dim status As Integer = Integer.Parse(statusString)
        Return status

    End Function

End Class
