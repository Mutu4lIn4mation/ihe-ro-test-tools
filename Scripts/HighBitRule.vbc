Class HighBitRule
    Inherits AttributeRule

    Public Sub New(ByVal iodType As IODType, ByVal severity As ErrorSeverity)

        MyBase.New("High Bit Rule", "", iodType, severity)

    End Sub

    Public Overrides Sub ApplyRule(ByRef dicomMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, ByVal iodType As IODType)

        If iodType = IODTypeRule Then
            Dim message As String

            If Not dicomMessage.DataSet.Exists(Tags.HighBit) Then
                message = "The attribute: '" + Tags.GetTagName(Tags.HighBit) + "' (" + Tags.HighBit + ") is not present. The high bit rule could not be checked."
                Me.SetError(message)
            ElseIf Not dicomMessage.DataSet.Exists(Tags.BitsStored) Then
                message = "The attribute: '" + Tags.GetTagName(Tags.BitsStored) + "' (" + Tags.BitsStored + ") is not present. The high bit rule could not be checked."
                Me.SetError(message)
            Else

                Dim valueHighBitStr As String = dicomMessage.DataSet(Tags.HighBit).Values().Item(0).ToString
                Dim valueBitsStoredStr As String = dicomMessage.DataSet(Tags.BitsStored).Values().Item(0).ToString
                Dim valueHighBit As Integer = Nothing
                Dim valueBitsStored As Integer = Nothing
                Dim ConversionOK As Boolean = True

                Try
                    valueHighBit = Integer.Parse(valueHighBitStr)
                Catch ex As System.Exception
                    ConversionOK = False
                    message = "The attribute: '" + Tags.GetTagName(Tags.HighBit) + "' (" + Tags.HighBit + ")  value is not valid."
                    Me.SetError(message)
                End Try

                If ConversionOK Then
                    Try
                        valueBitsStored = Integer.Parse(valueBitsStoredStr)
                    Catch ex As System.Exception
                        ConversionOK = False
                        message = "The attribute: '" + Tags.GetTagName(Tags.BitsStored) + "' (" + Tags.BitsStored + ") value is not valid."
                        Me.SetError(message)
                    End Try
                End If

                If ConversionOK Then
                    If valueHighBit = (valueBitsStored - 1) Then
                        message = "'" + Tags.GetTagName(Tags.HighBit) + "' (" + Tags.HighBit + ") equals '" + Tags.GetTagName(Tags.BitsStored) + "' (" + Tags.BitsStored + ") -1."
                        Me.SetValid(message)
                    Else
                        message = "'" + Tags.GetTagName(Tags.HighBit) + "' (" + Tags.HighBit + ") does not equal '" + Tags.GetTagName(Tags.BitsStored) + "' (" + Tags.BitsStored + ") -1."
                        Me.SetError(message)
                    End If
                End If
            End If
            'Reporter, write to results, if there is anything to report
            Me.Report()
        End If
    End Sub
End Class