Class ArchiveScenario2
    Inherits Scenario
    'Different steps in this scenario:
    '- store the reference dataset
    '- recieve the reference dataset
    '- compare the reference with the revieved dataset
    Public archiveActor As archiveActor = Nothing
    Private dialog As ArchiveDlg2 = Nothing
    Private Cancelclicked As Boolean = False
    Private recieve As ReceiveScenarioStep = Nothing
    Private validate As ValidateScenarioStep = Nothing
    Private cleanUp As CleanUpScenarioStep = Nothing

    Public Sub New()

        archiveActor = New ArchiveActor
        dialog = New ArchiveDlg2
        cleanUp = New CleanUpScenarioStep(TestToolConfiguration.GetInstance.GetSession.ResultsRootDirectory)

        'Show the dialog so that the user can specify which image set(s) is/are send
        dialog.ShowDialog()

        'set the XML configuration file
        'm_scenarioDatasetXmlFileName = "TransparencyReferenceDataSet.xml"

        'configure the send scenario step
        'No send scenario step needed

        'configure the recieve scenario step

        Select Case dialog.ArchiveDialogResult
            Case DialogResult.CT_PET
                recieve = New ReceiveScenarioStep(DialogResult.ONEOBJECT)
                recieve.AddActor(archiveActor)
                recieve.AddTransaction(New RAD_8_Transaction(IODType.CTImage))
                recieve.AddTransaction(New RAD_8_Transaction(IODType.PETImage))
                'MMRO I
                'recieve.AddTransaction(New MMRO_2_Transaction(DialogResult.ONEOBJECT))
                'MMRO II
                recieve.AddTransaction(New MMRO_II_2_Transaction(DialogResult.ONEOBJECT))
            Case DialogResult.CT_MR
                recieve = New ReceiveScenarioStep(DialogResult.ONEOBJECT)
                recieve.AddActor(archiveActor)
                recieve.AddTransaction(New RAD_8_Transaction(IODType.CTImage))
                recieve.AddTransaction(New RAD_8_Transaction(IODType.MRImage))
                'MMRO I
                'recieve.AddTransaction(New MMRO_2_Transaction(DialogResult.ONEOBJECT))
                'MMRO II
                recieve.AddTransaction(New MMRO_II_2_Transaction(DialogResult.ONEOBJECT))
            Case DialogResult.MR_PET
                recieve = New ReceiveScenarioStep(DialogResult.ONEOBJECT)
                recieve.AddActor(archiveActor)
                recieve.AddTransaction(New RAD_8_Transaction(IODType.MRImage))
                recieve.AddTransaction(New RAD_8_Transaction(IODType.PETImage))
                'MMRO I
                'recieve.AddTransaction(New MMRO_2_Transaction(DialogResult.ONEOBJECT))
                'MMRO II
                recieve.AddTransaction(New MMRO_II_2_Transaction(DialogResult.ONEOBJECT))
            Case DialogResult.CT_MR_PET
                recieve = New ReceiveScenarioStep(DialogResult.ARCHIVE)
                recieve.AddActor(archiveActor)
                recieve.AddTransaction(New RAD_8_Transaction(IODType.CTImage))
                recieve.AddTransaction(New RAD_8_Transaction(IODType.MRImage))
                recieve.AddTransaction(New RAD_8_Transaction(IODType.PETImage))
                'MMRO I
                'recieve.AddTransaction(New MMRO_2_Transaction(DialogResult.ARCHIVE))
                'MMRO II
                recieve.AddTransaction(New MMRO_II_2_Transaction(DialogResult.ARCHIVE))
            Case DialogResult.Cancel
                Cancelclicked = True
        End Select

        If Not Cancelclicked Then
            'configure the validate scenario step
            validate = New ValidateScenarioStep(recieve, False)

            'validate.AddRule(New CriticalAttributeInterRelationRule("", True, True, ErrorSeverity.RuleError))

            'C.7.1.1 Patient Module
            'Patient's Name	(0010,0010), same as in other received objects
            validate.AddRule(New CriticalAttributeInterRelationRule(Tags.PatientName, False, False, ErrorSeverity.RuleError, IODType.Generic))
            'Patient ID	(0010,0020), same as in other received objects
            validate.AddRule(New CriticalAttributeInterRelationRule(Tags.PatientID, False, False, ErrorSeverity.RuleError, IODType.Generic))
            'Patient's Birthdate (0010,0030), same as in other received objects
            validate.AddRule(New CriticalAttributeInterRelationRule(Tags.PatientsBirthDate, False, False, ErrorSeverity.RuleError, IODType.Generic))
            'Patient's Sex (0010,0040), same as in other received objects
            validate.AddRule(New CriticalAttributeInterRelationRule(Tags.PatientSex, False, False, ErrorSeverity.RuleError, IODType.Generic))

            'C.7.2.1 General Study Module		
            'Study Instance UID (0020,000D), same as in other received objects
            validate.AddRule(New CriticalAttributeInterRelationRule(Tags.StudyInstanceUID, False, False, ErrorSeverity.RuleError, IODType.Generic))
            'Study Date (0008,0020), same as in other received objects
            validate.AddRule(New CriticalAttributeInterRelationRule(Tags.StudyDate, False, False, ErrorSeverity.RuleError, IODType.Generic))
            'Study Time (0008,0030), same as in other received objects
            validate.AddRule(New CriticalAttributeInterRelationRule(Tags.StudyTime, False, False, ErrorSeverity.RuleError, IODType.Generic))
            'Referring Physician's Name (0008,0090), same as in other received objects
            validate.AddRule(New CriticalAttributeInterRelationRule(Tags.ReferringPhysiciansName, False, False, ErrorSeverity.RuleError, IODType.Generic))
            'Study ID (0020,0010), same as in other received objects
            validate.AddRule(New CriticalAttributeInterRelationRule(Tags.StudyID, False, False, ErrorSeverity.RuleError, IODType.Generic))
            'Accession Number (0008,0050), same as in other received objects
            validate.AddRule(New CriticalAttributeInterRelationRule(Tags.AccessionNumber, False, False, ErrorSeverity.RuleError, IODType.Generic))
            'Study Description (0008,1030), same as in other received objects
            validate.AddRule(New StudyDescriptionInterrelationRule(False, False, ErrorSeverity.RuleError, IODType.Generic))

            'C.7.3.1 General Series Module
            'Series Instance (0020,000E), the Spatial Registration object shall be stored in a different series from images.
            'So series instance UID in the Spatial Registration will be unique.
            validate.AddRule(New SeriesInstanceUIDInterRelationRule(ErrorSeverity.RuleError, IODType.Generic))
            'Patient Position should be one of these values HFS, FFS, HFP, FFP.
            Dim values(3) As String
            values(0) = "HFS"
            values(1) = "FFS"
            values(2) = "HFP"
            values(3) = "FFP"
            validate.AddRule(New ValueListRule(Tags.PatientPosition, values, IODType.CTImage, ErrorSeverity.RuleError))
            validate.AddRule(New ValueListRule(Tags.PatientPosition, values, IODType.MRImage, ErrorSeverity.RuleError))
            validate.AddRule(New ValueListRule(Tags.PatientPosition, values, IODType.PETImage, ErrorSeverity.RuleError))


            'C.7.4.1 Frame Of Reference Module
            'The Frame of Reference UID (0020,0052) of the Registration instance will have the same Frame of Reference UID
            'as the registered image set
            '!!! Also for hybrid? !!!
            validate.AddRule(New SameFrameOfReferenceInterRelationRule(Tags.FrameofReferenceUID, ErrorSeverity.RuleError, False))
            'The Frame of Reference UID (0020,0052) has to be different in all other image modality types
            '!!! Also for hybrid? !!!
            validate.AddRule(New ImageModalityFrameOfReferenceRule(ErrorSeverity.RuleError, False, IODType.Generic))
            'Position Reference Indicator (0020,1040), the same comments as the Frame of Reference UID apply here
            validate.AddRule(New CriticalAttributeInterRelationRule(Tags.PositionReferenceIndicator, True, False, ErrorSeverity.RuleError, IODType.Generic))



            'C.7.5.1 General Equipment Module
            'no rules for this module apply

            'C.7.6.2 Image Plane Module

            'Slice Thickness 0018,0050 is optional
            validate.AddRule(New OptionalRule(Tags.SliceThickness, IODType.CTImage, ErrorSeverity.RuleError))
            'Slice Location	0020,1041 is optional
            validate.AddRule(New OptionalRule(Tags.SliceLocation, IODType.CTImage, ErrorSeverity.RuleError))
            'Slice Thickness 0018,0050 is optional
            validate.AddRule(New OptionalRule(Tags.SliceThickness, IODType.MRImage, ErrorSeverity.RuleError))
            'Slice Location	0020,1041 is optional
            validate.AddRule(New OptionalRule(Tags.SliceLocation, IODType.MRImage, ErrorSeverity.RuleError))
            'Slice Thickness 0018,0050 is optional
            validate.AddRule(New OptionalRule(Tags.SliceThickness, IODType.PETImage, ErrorSeverity.RuleError))
            'Slice Location	0020,1041 is optional
            validate.AddRule(New OptionalRule(Tags.SliceLocation, IODType.PETImage, ErrorSeverity.RuleError))

            '1. For CTImage IOD, non-isotropic pixels are outside the scope of the profile
            '2. For RT Dose IOD, pixel spacing may be non-isotropic
            '3. For IHE-RO 2008 (MR, PET): We do require the X and Y resolutions are equal, the z resolution may be different
            validate.AddRule(New PixelSpacingRule(IODType.CTImage, ErrorSeverity.RuleError))
            validate.AddRule(New PixelSpacingRule(IODType.MRImage, ErrorSeverity.RuleError))
            validate.AddRule(New PixelSpacingRule(IODType.PETImage, ErrorSeverity.RuleError))

            'C.12.1 SOP Common Module
            'Specific Character Set (0008,0005) if present shall be the value "ISO_IR 100".
            validate.AddRule(New ValueRule(Tags.SpecificCharacterSet, "ISO_IR 100", IODType.CTImage, ErrorSeverity.RuleError))
            'SOP Class UID (0008,0016) if present shall be the value "1.2.840.10008.5.1.4.1.1.2".
            validate.AddRule(New ValueRule(Tags.SOPClassUID, SOPclass.CTImageSOPClassUID, IODType.CTImage, ErrorSeverity.RuleError))
            'Specific Character Set (0008,0005) if present shall be the value "ISO_IR 100".
            validate.AddRule(New ValueRule(Tags.SpecificCharacterSet, "ISO_IR 100", IODType.MRImage, ErrorSeverity.RuleError))
            'SOP Class UID (0008,0016) if present shall be the value "1.2.840.10008.5.1.4.1.1.4".
            validate.AddRule(New ValueRule(Tags.SOPClassUID, SOPclass.MRImageSOPClassUID, IODType.MRImage, ErrorSeverity.RuleError))
            'Specific Character Set (0008,0005) if present shall be the value "ISO_IR 100".
            validate.AddRule(New ValueRule(Tags.SpecificCharacterSet, "ISO_IR 100", IODType.PETImage, ErrorSeverity.RuleError))
            'SOP Class UID (0008,0016) if present shall be the value "1.2.840.10008.5.1.4.1.1.128".
            validate.AddRule(New ValueRule(Tags.SOPClassUID, SOPclass.PetImageSOPClassUID, IODType.PETImage, ErrorSeverity.RuleError))
            'Specific Character Set (0008,0005) if present shall be the value "ISO_IR 100".
            validate.AddRule(New ValueRule(Tags.SpecificCharacterSet, "ISO_IR 100", IODType.SpatialRegistration, ErrorSeverity.RuleError))
            'SOP Class UID (0008,0016) if present shall be the value "1.2.840.10008.5.1.4.1.1.66.1".
            validate.AddRule(New ValueRule(Tags.SOPClassUID, SOPclass.SpatialRegistrationSOPClassUID, IODType.SpatialRegistration, ErrorSeverity.RuleError))

            'Instance Creation Date	0008,0012 is optional
            validate.AddRule(New OptionalRule(Tags.InstanceCreationDate, IODType.CTImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceCreationDate, IODType.MRImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceCreationDate, IODType.PETImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceCreationDate, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            'Instance Creation Time	0008,0013 is optional
            validate.AddRule(New OptionalRule(Tags.InstanceCreationTime, IODType.CTImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceCreationTime, IODType.MRImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceCreationTime, IODType.PETImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceCreationTime, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            'Instance Creator UID 0008,0014 is optional
            validate.AddRule(New OptionalRule(Tags.InstanceCreatorUID, IODType.CTImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceCreatorUID, IODType.MRImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceCreatorUID, IODType.PETImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceCreatorUID, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            'Instance Number 0020,0013 is optional
            validate.AddRule(New OptionalRule(Tags.InstanceNumber, IODType.CTImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceNumber, IODType.MRImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceNumber, IODType.PETImage, ErrorSeverity.RuleError))
            validate.AddRule(New OptionalRule(Tags.InstanceNumber, IODType.SpatialRegistration, ErrorSeverity.RuleError))


            'C.20.1 Spatial Registration Series Module
            'Modality (0008,0060) shall be the value "REG".
            validate.AddRule(New IsRequiredRule(Tags.Modality, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            validate.AddRule(New ValueRule(Tags.Modality, "REG", IODType.SpatialRegistration, ErrorSeverity.RuleError))

            'C.20.2 Spatial Registration
            'Registration sequence (0070,0308) must contain exactly 2 items
            validate.AddRule(New NrIntOfSequenceItemRule(Tags.RegistrationSequence, 2, IODType.SpatialRegistration, ErrorSeverity.RuleError))

            'each item in (0070,0308) must contain 1 item in (0070,0309)
            validate.AddRule(New NrIntOfSequenceItemRule(Tags.MatrixRegistrationSequence, 1, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            validate.AddRule(New NrIntOfSequenceItemRule(Tags.MatrixRegistrationSequence2, 1, IODType.SpatialRegistration, ErrorSeverity.RuleError))

            'each item in (0070,0309) must contain 1 item in (0070,030A)
            validate.AddRule(New NrIntOfSequenceItemRule(Tags.MatrixSequence, 1, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            validate.AddRule(New NrIntOfSequenceItemRule(Tags.MatrixSequence2, 1, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            'each item in (0070,030A) must contain a 4x4 matrix in (3006,00C6) of which the last 4 positions are 0/0/0/1
            validate.AddRule(New CorrectMatrixRule(Tags.FrameofReferenceTransformationMatrix, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            validate.AddRule(New CorrectMatrixRule(Tags.FrameofReferenceTransformationMatrix2, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            'the matrix in the first item in the registration sequence must contain the values 1/0/0/0/0/1/0/0/0/0/1/0/0/0/0/1
            validate.AddRule(New CorrectIdentityMatrixRule(Tags.FrameofReferenceTransformationMatrix, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            'the matrix in the second item in the registration sequence must contain the same values as the registration item in the reference dataset
            validate.AddRule(New CorrectExpectedMatrixRule(Tags.FrameofReferenceTransformationMatrix2, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            'the value of the frame of reference UID must be the same both in the base of the object and in the first registration object
            validate.AddRule(New EqualToRule(Tags.FrameofReferenceUID, IODType.SpatialRegistration, ErrorSeverity.RuleError, Tags.RegistrationFrameofReferenceUID))
            'check for each of the FoRUIDs whether there is an image with the same FoRUID
            validate.AddRule(New SameFrameOfReferenceInterRelationRule(Tags.RegistrationFrameofReferenceUID, ErrorSeverity.RuleError, False))
            validate.AddRule(New SameFrameOfReferenceInterRelationRule(Tags.RegistrationFrameofReferenceUID2, ErrorSeverity.RuleError, False))

            'MMRO I
            'the referenced image sequence (0008,1140) must not exist
            'validate.AddRule(New NotPresentRule(Tags.ReferencedImageSequence, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            'validate.AddRule(New NotPresentRule(Tags.ReferencedImageSequence2, IODType.SpatialRegistration, ErrorSeverity.RuleError))

            'MMRO II
            'the referenced image sequence (0008,1140) items must reference to the correct image sets
            'validate.AddRule(New ReferencedImageSequenceRule(IODType.SpatialRegistration, ErrorSeverity.RuleError))

            'Frame of Reference Transformation Matrix Type (0070,030C) if present shall be the value "RIGID".
            validate.AddRule(New IsRequiredRule(Tags.FrameofReferenceTransformationMatrixType, IODType.SpatialRegistration, ErrorSeverity.RuleError))
            validate.AddRule(New ValueRule(Tags.FrameofReferenceTransformationMatrixType, "RIGID", IODType.SpatialRegistration, ErrorSeverity.RuleError))

            'Add the scenario steps in the correct order
            m_scenarioSteps.Add(recieve)
            m_scenarioSteps.Add(validate)

            If TestToolConfiguration.GetInstance.DoCleanUp = True Then
                m_scenarioSteps.Add(cleanUp)
            End If
        End If
    End Sub
End Class
