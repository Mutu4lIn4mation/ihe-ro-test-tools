Public Class DataSetHandler

    Public Shared ReadOnly RTAdvancedXMLFileName As String = "RTDosimetricPlanDataSet.xml"
    Public Shared ReadOnly UPSMessagesXMLFileName As String = "UPSMessages.xml"
    Public Shared ReadOnly UPSCacheXMLFileName As String = "UPSCache.xml"
    Public Shared ReadOnly UPSDataXMLFileName As String = "UPSData.xml"

    'file name mask for dicom dataset files
    Public Shared ReadOnly UPSDatasetFileMask As String = "*.dcm"

    Private Shared Function getDataSetFileAndPath(ByVal XMLFileName As String, ByVal DataSetName As String) As String
        Dim retVal As String = ""
        ' set path to script dir in front of the filename
        Dim XMLPathAndFile As String = TestToolConfiguration.GetInstance.GetScriptPath + XMLFileName
        ' Create and load new XML document
        Dim m_DataSetXML As System.Xml.XmlDocument = New System.Xml.XmlDocument
        m_DataSetXML.Load(XMLPathAndFile)
        ' create the relative datapath
        Dim relativeTestDataPath As String = m_DataSetXML.SelectSingleNode("/DataSet/DataSetPath").InnerText
        Dim datasetPath As String = TestToolConfiguration.GetInstance.SessionPath + relativeTestDataPath

        'get the name of the dicom file from the xml document
        retVal = datasetPath + "\" + m_DataSetXML.SelectSingleNode("/DataSet/" + DataSetName.ToString).InnerText
        Return retVal
    End Function

    Public Shared Function LoadDatasetFromFile(ByVal XMLFileName As String, ByVal DataSetName As String) As DvtkHighLevelInterface.Dicom.Other.DataSet
        Dim dataSet As DvtkHighLevelInterface.Dicom.Other.DataSet = New DvtkHighLevelInterface.Dicom.Other.DataSet()

        'create the filename
        Dim fileName As String = getDataSetFileAndPath(XMLFileName, DataSetName)

        If Not fileName = "" Then
            Try
                'Read the Dataset from the file
                dataSet.Read(fileName)
            Catch ex As DvtkHighLevelInterface.Common.Other.HliException

                If XMLFileName = UPSCacheXMLFileName Then

                    Dim errorMessage As String = "The test tool simulating a PDS can not continue this scenario, since it can not read the file from the dataset: " + fileName
                    Dim leftName As String = Left(DataSetName, Len(DataSetName) - 1)

                    If leftName = "C-FIND-RSP" Then
                        errorMessage = errorMessage + ". This file is normally generated by scenario: 2009PDSScenario_01a_RetrievalOfWorklist, make sure this scenario has been completed succesfully"
                        Logger.GetInstance().LogErrorMessage(errorMessage)
                    End If
                    If leftName = "N-ACTION-RSP" Then
                        Dim scenNr As String = Right(DataSetName, 1)
                        If scenNr = "1" Then
                            errorMessage = errorMessage + ". This file is normally generated by scenario: 2009PDSScenario_02_AcquisitionProcedureStepStart, make sure this scenario has been completed succesfully"
                        End If
                        If scenNr = "2" Then
                            errorMessage = errorMessage + ". This file is normally generated by scenario: 2009PDSScenario_04_PositionRegistrationProcedureStepStart, make sure this scenario has been completed succesfully"
                        End If
                        If scenNr = "3" Then
                            errorMessage = errorMessage + ". This file is normally generated by scenario: 2009PDSScenario_06_AdjustPatientPositionProcedureStepStart, make sure this scenario has been completed succesfully"
                        End If
                        If scenNr = "4" Then
                            errorMessage = errorMessage + ". This file is normally generated by scenario: 2009PDSScenario_08_DeliverTreatmentProcedureStepStart, make sure this scenario has been completed succesfully"
                        End If
                        Logger.GetInstance().LogErrorMessage(errorMessage)
                    End If

                End If
                Throw New System.Exception("Error Reading the file from the Dataset: " + fileName)
            End Try
        End If
        Return dataSet
    End Function

    Public Shared Function SaveDatasetToFile(ByVal dataSet As Dicom.Other.DataSet, ByVal XMLFileName As String, ByVal DataSetName As String) As Boolean
        Dim bRetVal As Boolean = False
        'get the name of the dicom file from the xml document

        ' set path to script dir in front of the filename
        Dim XMLPathAndFile As String = TestToolConfiguration.GetInstance.GetScriptPath + XMLFileName
        ' Create and load new XML document
        Dim m_DataSetXML As System.Xml.XmlDocument = New System.Xml.XmlDocument
        m_DataSetXML.Load(XMLPathAndFile)
        ' create the relative datapath
        Dim relativeTestDataPath As String = m_DataSetXML.SelectSingleNode("/DataSet/DataSetPath").InnerText
        Dim datasetPath As String = TestToolConfiguration.GetInstance.SessionPath + relativeTestDataPath

        Dim fileName As String = datasetPath + "\" + DataSetName + ".dcm"
        If Not fileName = "" Then
            Try
                'Write the dataset to file
                dataSet.Write(fileName)
                bRetVal = True
            Catch ex As DvtkHighLevelInterface.Common.Other.HliException
                Throw New System.Exception("Error writing the Dataset to file: " + fileName, ex)
            End Try
        End If
        Return bRetVal
    End Function

    Public Shared Function SaveDatasetToFileUPS(ByVal dataSet As Dicom.Other.DataSet, ByVal XMLFileName As String, ByVal DataSetName As String) As Boolean
        Dim bRetVal As Boolean = False

        ' set path to script dir in front of the filename
        Dim XMLPathAndFile As String = TestToolConfiguration.GetInstance.GetScriptPath + XMLFileName
        ' Create and load new XML document
        Dim m_DataSetXML As System.Xml.XmlDocument = New System.Xml.XmlDocument
        m_DataSetXML.Load(XMLPathAndFile)
        ' create the relative datapath
        Dim relativeTestDataPath As String = m_DataSetXML.SelectSingleNode("/DataSet/DataSetPath").InnerText
        Dim datasetPath As String = TestToolConfiguration.GetInstance.SessionPath + relativeTestDataPath

        'get the name of the dicom file from the xml document
        Dim fileName As String = datasetPath + "\PDS\" + DataSetName + ".dcm"
        Dim dicomFile As New DvtkHighLevelInterface.Dicom.Files.DicomFile
        If Not fileName = "" Then
            Try
                'Write the dataset to file
                dicomFile.DataSet = dataSet
                dicomFile.Write(fileName)
                bRetVal = True
            Catch ex As DvtkHighLevelInterface.Common.Other.HliException
                Throw New System.Exception("Error writing the Dataset to file: " + fileName, ex)
            End Try
        End If
        Return bRetVal
    End Function

    Public Shared Sub SetCacheUPS_NewStatus(ByVal dicomMessage As DicomMessage, ByVal status As String)
        ' set path to script dir in front of the filename
        Dim XMLPathAndFile As String = TestToolConfiguration.GetInstance.GetScriptPath + UPSCacheXMLFileName
        ' Create and load new XML document
        Dim m_DataSetXML As System.Xml.XmlDocument = New System.Xml.XmlDocument
        m_DataSetXML.Load(XMLPathAndFile)
        ' create the relative datapath
        Dim relativeTestDataPath As String = m_DataSetXML.SelectSingleNode("/DataSet/DataSetPath").InnerText
        Dim datasetPath As String = TestToolConfiguration.GetInstance.SessionPath + relativeTestDataPath


        Dim directoryInfo As DirectoryInfo = New DirectoryInfo(datasetPath + "\TMS")
        For Each File As FileInfo In directoryInfo.GetFiles

            If (File.Name.EndsWith(".dcm")) Then

                Dim dicomFile As New DvtkHighLevelInterface.Dicom.Files.DicomFile
                'Dim dataSet As DvtkHighLevelInterface.Dicom.Other.DataSet = New DvtkHighLevelInterface.Dicom.Other.DataSet()
                dicomFile.Read(File.FullName)

                If (dicomMessage.CommandSet(Tags.RequestedSOPInstanceUID).Values(0).ToString() = dicomFile.DataSet(Tags.SOPInstanceUID).Values(0).ToString()) Then
                    dicomFile.DataSet.Set(Tags.ProcedureStepState, CS, status)
                    dicomFile.DataSet.Set(Tags.TransactionUID, UI, dicomMessage.DataSet(Tags.TransactionUID).Values(0))
                    dicomFile.Set(Tags.TransactionUID, UI, dicomMessage(Tags.TransactionUID).Values(0))

                    If (status = "CANCELED") Then
                        dicomFile.Set(Tags.UPSProgressInformationUnifiedProcedureStepCancellationDateTime, DT, DateTime.Now().ToString("yyyyMMddHHmmss") + ".0000")
                    End If

                    dicomFile.Write(File.FullName)
                End If

            End If
        Next

    End Sub

    Public Shared Function LoadDatasetFromFolderByClassUid(ByVal datasetFolder As String, ByVal sopClassUid As String) As DvtkHighLevelInterface.Dicom.Other.DataSet
        Dim dataSet As DvtkHighLevelInterface.Dicom.Other.DataSet = Nothing
        Dim fileName As String = ""

        'this performs linear search for specified SOP Class UID
        '(files are searched one by one)
        For Each fileName In (GetDatasetFilesFromFolder(datasetFolder))
            'load file as dataset

            If (fileName.EndsWith(".dcm")) Then

                dataSet = LoadDatasetFromFileName(fileName)

                If dataSet(Tags.SOPClassUID).Values(0).Equals(sopClassUid) Then
                    'we have found dataset of specified SOP Class UID
                    Exit For
                Else
                    dataSet = Nothing
                End If
            End If
        Next

        Return dataSet
    End Function

    Public Shared Function LoadDatasetFromFileName(ByVal FileName As String) As DvtkHighLevelInterface.Dicom.Other.DataSet
        Dim dataSet As DvtkHighLevelInterface.Dicom.Other.DataSet = New DvtkHighLevelInterface.Dicom.Other.DataSet()

        If Not FileName = "" Then
            Try
                'Read the Dataset from the file
                dataSet.Read(FileName)
            Catch ex As DvtkHighLevelInterface.Common.Other.HliException
                Throw New System.Exception("Error reading file: " + FileName)
            End Try
        End If

        Return dataSet
    End Function

    Public Shared Function GetDatasetFilesFromFolder(ByVal folder As String) As String()
        Return GetFilesFromFolder(folder, UPSDatasetFileMask)
    End Function

    Public Shared Function GetFilesFromFolder(ByVal folder As String, ByVal fileMask As String) As String()
        Dim file As String
        Dim files As ArrayList = New ArrayList
        Dim retVal(-1) As String

        If folder <> Nothing And folder <> "" And fileMask <> Nothing And fileMask <> "" Then
            For Each file In Directory.GetFiles(folder, fileMask)
                files.Add(file)
            Next
            Dim counter As Integer = 0
            ReDim retVal(files.Count - 1)

            For counter = 0 To files.Count - 1 Step 1
                retVal(counter) = files.Item(counter).ToString
            Next
        End If

        Return retVal
    End Function

    Public Shared Sub UpdateCacheUPS_Nset(ByVal dicomMessage As DicomMessage)
        ' set path to script dir in front of the filename
        Dim XMLPathAndFile As String = TestToolConfiguration.GetInstance.GetScriptPath + UPSCacheXMLFileName
        ' Create and load new XML document
        Dim m_DataSetXML As System.Xml.XmlDocument = New System.Xml.XmlDocument
        m_DataSetXML.Load(XMLPathAndFile)
        ' create the relative datapath
        Dim relativeTestDataPath As String = m_DataSetXML.SelectSingleNode("/DataSet/DataSetPath").InnerText
        Dim datasetPath As String = TestToolConfiguration.GetInstance.SessionPath + relativeTestDataPath


        Dim directoryInfo As DirectoryInfo = New DirectoryInfo(datasetPath + "\TMS")
        For Each File As FileInfo In directoryInfo.GetFiles

            If (File.Name.EndsWith(".dcm")) Then

                Dim dicomFile As New DvtkHighLevelInterface.Dicom.Files.DicomFile
                'Dim dataSet As DvtkHighLevelInterface.Dicom.Other.DataSet = New DvtkHighLevelInterface.Dicom.Other.DataSet()
                dicomFile.Read(File.FullName)

                If (dicomMessage.CommandSet(Tags.RequestedSOPInstanceUID).Values(0).ToString() = dicomFile.DataSet(Tags.SOPInstanceUID).Values(0).ToString() And dicomMessage.DataSet(Tags.TransactionUID).Values(0) = dicomFile.DataSet(Tags.TransactionUID).Values(0)) Then

                    For i As Integer = 0 To dicomMessage.DataSet.Count - 1

                        If (dicomMessage.DataSet.Item(i).VR = DvtkData.Dimse.VR.SQ) Then

                            If (dicomMessage.DataSet.Item(i).ItemCount = 0) Then
                                dicomFile.DataSet.Set(dicomMessage.DataSet.Item(i).TagSequenceString, dicomMessage.DataSet.Item(i).VR)
                            Else
                                dicomFile = copySeqAttributeFromInputToOutput(dicomMessage.DataSet.Item(i), dicomFile, dicomMessage)
                            End If

                        Else

                            dicomFile.DataSet.Set(dicomMessage.DataSet.Item(i).TagSequenceString, dicomMessage.DataSet.Item(i).VR, dicomMessage.DataSet.Item(i).Values(0))
                        End If

                    Next

                    dicomFile.Write(File.FullName)
                End If

            End If
        Next

    End Sub

    Public Shared Function copySeqAttributeFromInputToOutput(sequenceAttribute As DvtkHighLevelInterface.Dicom.Other.Attribute, output As DvtkHighLevelInterface.Dicom.Files.DicomFile, input As DvtkHighLevelInterface.Dicom.Messages.DicomMessage) As DvtkHighLevelInterface.Dicom.Files.DicomFile
        Dim x As Integer
        Dim SeqItem As DvtkHighLevelInterface.Dicom.Other.SequenceItem = Nothing

        If (sequenceAttribute.ItemCount() = 0) Then
            output.Set(sequenceAttribute.TagSequenceString, sequenceAttribute.VR)
        Else
            output.DataSet.Delete(sequenceAttribute.TagSequenceString)
        End If
        For x = 1 To sequenceAttribute.ItemCount()
            SeqItem = sequenceAttribute.GetItem(x)

            Dim i As Integer
            For i = 0 To SeqItem.Count - 1

                If SeqItem.Item(i).VR = DvtkData.Dimse.VR.SQ Then
                    copySeqAttributeFromInputToOutput(SeqItem.Item(i), output, input)
                Else
                    If (input.DataSet.Exists(SeqItem.Item(i).TagSequenceString)) Then
                        output.Set(SeqItem.Item(i).TagSequenceString, SeqItem.Item(i).VR, input.DataSet(SeqItem.Item(i).TagSequenceString).Values(0))
                    End If
                End If
            Next
        Next

        Return output

    End Function

    Public Shared Function copySeqAttributeFromInputToOutput(sequenceAttribute As DvtkHighLevelInterface.Dicom.Other.Attribute, output As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, input As DvtkHighLevelInterface.Dicom.Other.DataSet, overrideOutputWithInput As Boolean) As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        Dim x As Integer
        Dim SeqItem As DvtkHighLevelInterface.Dicom.Other.SequenceItem = Nothing

        If (sequenceAttribute.ItemCount() = 0) Then
            output.Set(sequenceAttribute.TagSequenceString, sequenceAttribute.VR)
        End If
        For x = 1 To sequenceAttribute.ItemCount()
            SeqItem = sequenceAttribute.GetItem(x)

            Dim i As Integer
            For i = 0 To SeqItem.Count - 1

                If SeqItem.Item(i).VR = DvtkData.Dimse.VR.SQ Then
                    copySeqAttributeFromInputToOutput(SeqItem.Item(i), output, input, overrideOutputWithInput)
                Else
                    If overrideOutputWithInput Then
                        If (input(SeqItem.Item(i).TagSequenceString).Exists) Then
                            output.DataSet.Set(SeqItem.Item(i).TagSequenceString, SeqItem.Item(i).VR, input(SeqItem.Item(i).TagSequenceString).Values(0))
                        End If

                    ElseIf (SeqItem.Item(i).Values(0) = "") Then
                        If (input(SeqItem.Item(i).TagSequenceString).Exists) Then
                            If Not (input(SeqItem.Item(i).TagSequenceString).Values(0) = "") Then
                                output.DataSet.Set(SeqItem.Item(i).TagSequenceString, SeqItem.Item(i).VR, input(SeqItem.Item(i).TagSequenceString).Values(0))
                            End If
                        End If
                    End If
                    End If
            Next
        Next

        Return output

    End Function

    Public Shared Function getAttributeValueFromDataSet(ByVal XMLFileName As String, ByVal DataSetName As String, ByVal tag As String) As String

        Dim retVal As String = Nothing
        Dim dataSet As Dicom.Other.DataSet = LoadDatasetFromFile(XMLFileName, DataSetName)
        If (dataSet.Exists(tag)) Then
            retVal = dataSet(tag).Values(0)
        Else

            If XMLFileName = UPSCacheXMLFileName Then
                Dim errorMessage As String = "The test tool simulating a PDS can not continue this scenario, since it does not know the value for attribute: " + Tags.GetTagName(tag)

                Dim leftName As String = Left(DataSetName, Len(DataSetName) - 1)
                If leftName = "C-FIND-RSP" Then
                    errorMessage = errorMessage + ". This attribute should be acquired during scenario: 2009PDSScenario_01a_RetrievalOfWorklist, make sure this scenario has been completed succesfully"
                End If
                If leftName = "N-ACTION-RSP" Then
                    Dim scenNr As String = Right(DataSetName, 1)
                    If scenNr = "1" Then
                        errorMessage = errorMessage + ". This attribute should be acquired during scenario: 2009PDSScenario_02_AcquisitionProcedureStepStart, make sure this scenario has been completed succesfully"
                    End If
                    If scenNr = "2" Then
                        errorMessage = errorMessage + ". This attribute should be acquired during scenario: 2009PDSScenario_04_PositionRegistrationProcedureStepStart, make sure this scenario has been completed succesfully"
                    End If
                    If scenNr = "3" Then
                        errorMessage = errorMessage + ". This attribute should be acquired during scenario: 2009PDSScenario_06_AdjustPatientPositionProcedureStepStart, make sure this scenario has been completed succesfully"
                    End If
                    If scenNr = "4" Then
                        errorMessage = errorMessage + ". This attribute should be acquired during scenario: 2009PDSScenario_08_DeliverTreatmentProcedureStepStart, make sure this scenario has been completed succesfully"
                    End If

                End If

                Logger.GetInstance().LogErrorMessage(errorMessage)
            End If
        End If
        Return retVal

    End Function

    Public Shared Function AttributeExistsInDataSet(ByVal XMLFileName As String, ByVal DataSetName As String, ByVal tag As String) As Boolean
        Dim dataSet As Dicom.Other.DataSet = LoadDatasetFromFile(XMLFileName, DataSetName)
        Return dataSet.Exists(tag)
    End Function
    Public Shared Function getDataPath(ByVal XMLFileName As String) As String
        Dim retVal As String = ""
        ' set path to script dir in front of the filename
        Dim XMLPathAndFile As String = TestToolConfiguration.GetInstance.GetScriptPath + XMLFileName
        ' Create and load new XML document
        Dim m_DataSetXML As System.Xml.XmlDocument = New System.Xml.XmlDocument
        m_DataSetXML.Load(XMLPathAndFile)
        ' create the relative datapath
        Dim relativeTestDataPath As String = m_DataSetXML.SelectSingleNode("/DataSet/DataSetPath").InnerText
        retVal = TestToolConfiguration.GetInstance.SessionPath + relativeTestDataPath
        Return retVal
    End Function

End Class

