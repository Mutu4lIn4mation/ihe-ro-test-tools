Class TreatmentDeliveryTypeRuleIPDWV2
    Inherits AttributeRule

    ''' <summary>
    ''' The value of the attribute should be present in the dataset
    ''' </summary>
    ''' <param name="iodType"></param>
    ''' <param name="severity"></param>
    ''' <remarks></remarks>

    Public Sub New(ByVal iodType As IODType, ByVal severity As ErrorSeverity)

        MyBase.New("Treatment Delivery Type Rule", "", iodType, severity)

    End Sub

    Public Overrides Sub ApplyRule(ByRef dicomMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, ByVal iodType As IODType)

        'Dim refMessage As DicomMessage = ReferenceDataSet.GetInstance.GetDCMObjectFromFileBySopClassUID(SOPclass.RTBeamsDeliveryInstructionSOPClassUID, DataDirSelector.UPSDataDir)

        If dicomMessage.DataSet(Tags.SOPClassUID).Values(0) = SOPclass.RTBeamsDeliveryInstructionSOPClassUID Then
            Dim message As String = ""
            Dim nrOfItems As Integer = 0
            Dim TreatmentDeliveryType As String
            Dim PrimaryDosimeterUnit As String
            Dim ContinuationStartMeterset As String
            Dim ContinuationEndMeterset As String

            If dicomMessage.Exists(Tags.BeamTaskSequence) Then
                nrOfItems = dicomMessage.Item(Tags.BeamTaskSequence).ItemCount
            End If

            If Not nrOfItems = 0 Then

                For serieItem As Integer = 1 To nrOfItems
                    Dim sqSerieItem As Dicom.Other.SequenceItem = dicomMessage.Item(Tags.BeamTaskSequence).GetItem(serieItem)
                    If sqSerieItem.Exists(Tags.TreatmentDeliveryType2) Then
                        TreatmentDeliveryType = sqSerieItem.GetValues(Tags.TreatmentDeliveryType2).Item(0)
                        If serieItem = 1 Then
                            If TreatmentDeliveryType = "CONTINUATION" Then
                                Me.SetValid("The attribute: '" + Tags.BeamTaskSequence + "[" + serieItem.ToString() + "]\" + Tags.TreatmentDeliveryType2 + " is correct in the RT Beams Delivery")
                            Else
                                Me.SetError("The attribute: '" + Tags.BeamTaskSequence + "[" + serieItem.ToString() + "]\" + Tags.TreatmentDeliveryType2 + " is not CONTINUATION as it should be.")
                            End If
                            Me.Report()

                            If sqSerieItem.Exists(Tags.PrimaryDosimeterUnit2) Then
                                If sqSerieItem(Tags.PrimaryDosimeterUnit2).Values.Item(0) = "" Then
                                    message = "The attribute '" + Tags.GetTagName(Tags.PrimaryDosimeterUnit2) + "' (" + Tags.PrimaryDosimeterUnit2 + ") contains an empty value, but should contain a value."
                                    Me.SetError(message)
                                    Me.Report()
                                Else
                                    PrimaryDosimeterUnit = sqSerieItem.GetValues(Tags.PrimaryDosimeterUnit2).Item(0)
                                End If
                            Else
                                message = "The attribute: '" + Tags.BeamTaskSequence + "[1]\" + Tags.PrimaryDosimeterUnit2 + " is not present."
                                Me.SetError(message)
                                Me.Report()
                            End If

                            If sqSerieItem.Exists(Tags.ContinuationStartMeterset) Then
                                If sqSerieItem(Tags.ContinuationStartMeterset).Values.Item(0) = "" Then
                                    message = "The attribute '" + Tags.GetTagName(Tags.ContinuationStartMeterset) + "' (" + Tags.ContinuationStartMeterset + ") contains an empty value, but should contain a value."
                                    Me.SetError(message)
                                    Me.Report()
                                Else
                                    ContinuationStartMeterset = sqSerieItem.GetValues(Tags.ContinuationStartMeterset).Item(0)
                                End If
                            Else
                                message = "The attribute: '" + Tags.BeamTaskSequence + "[1]\" + Tags.ContinuationStartMeterset + " is not present."
                                Me.SetError(message)
                                Me.Report()
                            End If

                            If sqSerieItem.Exists(Tags.ContinuationEndMeterset) Then
                                If sqSerieItem(Tags.ContinuationEndMeterset).Values.Item(0) = "" Then
                                    message = "The attribute '" + Tags.GetTagName(Tags.ContinuationEndMeterset) + "' (" + Tags.ContinuationEndMeterset + ") contains an empty value, but should contain a value."
                                    Me.SetError(message)
                                    Me.Report()
                                Else
                                    ContinuationEndMeterset = sqSerieItem.GetValues(Tags.ContinuationEndMeterset).Item(0)
                                End If
                            Else
                                message = "The attribute: '" + Tags.BeamTaskSequence + "[1]\" + Tags.ContinuationEndMeterset + " is not present."
                                Me.SetError(message)
                                Me.Report()
                            End If
                        Else
                            If TreatmentDeliveryType = "TREATMENT" Then
                                Me.SetValid("The attribute: '" + Tags.BeamTaskSequence + "[" + serieItem.ToString() + "]\" + Tags.TreatmentDeliveryType2 + " is correct in the RT Beams Delivery")
                            Else
                                Me.SetError("The attribute: '" + Tags.BeamTaskSequence + "[" + serieItem.ToString() + "]\" + Tags.TreatmentDeliveryType2 + " is not TREATMENT as it should be.")
                            End If
                            Me.Report()
                        End If
                    Else
                        message = "The attribute: '" + Tags.BeamTaskSequence + "[" + serieItem.ToString() + "]\" + Tags.TreatmentDeliveryType2 + " is not present."
                        Me.SetError(message)
                        Me.Report()
                    End If
                Next


            End If

            'If Not errorEncountered Then
            '    Dim value As String
            '    Dim counter2 As Integer = 1
            '    For Each value In sourceValues
            '        If counter2 = 1 Then
            '            If value = "CONTINUATION" Then
            '                Me.SetValid("The Value: " + value + " is correct in the RT Beams Delivery")
            '            Else
            '                Me.SetError("The Value: " + value + " is not CONTINUATION as it should be.")
            '            End If
            '            counter2 = counter2 + 1
            '        Else
            '            If value = "TREATMENT" Then
            '                Me.SetValid("The Value: " + value + " is correct in the RT Beams Delivery")
            '            Else
            '                Me.SetError("The Value: " + value + " is not TREATMENT as it should be.")
            '            End If
            '            counter2 = counter2 + 1
            '        End If
            '        Me.Report()
            '    Next

            'End If

        End If
    End Sub

End Class