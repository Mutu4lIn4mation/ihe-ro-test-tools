Class DateTimeRule
    Inherits AttributeRule

    Private m_startDateTimeRange As DateTime
    Private m_endDateTimeRange As DateTime

    ''' <summary>
    ''' todo: this rule checks the date and time, and validates if value is in a given range
    ''' </summary>
    ''' <param name="valueTag">attribute with the date and time</param>
    ''' <param name="iodType"></param>
    ''' <param name="severity"></param>
    ''' <remarks></remarks>

    Public Sub New(ByVal valueTag As String, ByVal startDateTimeRange As DateTime, ByVal endDateTimeRange As DateTime, ByVal iodType As IODType, ByVal severity As ErrorSeverity)

        MyBase.New("DateTime Rule", valueTag, iodType, severity)
        m_startDateTimeRange = startDateTimeRange
        m_endDateTimeRange = endDateTimeRange

    End Sub

    Public Overrides Sub ApplyRule(ByRef dicomMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, ByVal iodType As IODType)
        Dim message As String = ""
        If iodType = IODTypeRule Then
            'message solely for the C-FIND DICOM validation

            If dicomMessage.Exists(m_TagSequence) Then
                Dim dateTimeString As String = dicomMessage(m_TagSequence).Values.Item(0).ToString()
                If (validateDateTimeString(dateTimeString)) = False Then
                    message = "The attribute: '" + Tags.GetTagName(m_TagSequence) + "' (" + m_TagSequence + ") has the value: " + dateTimeString + ", that is NOT in the given range " + m_startDateTimeRange.ToString("yyyyMMddHHmmss") + " - " + m_endDateTimeRange.ToString("yyyyMMddHHmmss") + " (type 1 attribute)."
                    Reporter.GetInstance().ReportDicomError(message)
                End If
            End If
        End If
    End Sub

    Private Function validateDateTimeString(ByVal inputString As String) As Boolean

        Dim bRetVal As Boolean = False
        Try
            'Remove leading or trailing space characters
            inputString = inputString.Trim()

            ' Remove UTC offset iff pressent before parsing
            If inputString.Contains("+") Then
                Dim tmp() As String = inputString.Split("+"c)
                inputString = tmp(0)
            ElseIf inputString.Contains("-") Then
                Dim tmp() As String = inputString.Split("-"c)
                inputString = tmp(0)
            End If

            ' Get The DateTime Format 
            Dim formatString As String = getDateTimeFormat(inputString)

            ' Parse the input
            Dim msgDateTime As DateTime = DateTime.ParseExact(inputString, formatString, System.Globalization.CultureInfo.InvariantCulture)

            'check if input date occours within 24 hours
            If (m_startDateTimeRange <= msgDateTime) And (m_endDateTimeRange >= msgDateTime) Then
                bRetVal = True
            End If
        Catch ex As Exception
            bRetVal = False
        End Try

        Return bRetVal
    End Function

    Private Function getDateTimeFormat(ByVal inputString As String) As String
        Dim retVal As String = ""
        If inputString.Contains(".") Then
            'Fragtional seconds present, calculate amount and create format
            Dim numberOfFractionalDigits() As String = inputString.Split("."c)
            If (numberOfFractionalDigits(1).Length > 0 And numberOfFractionalDigits(1).Length <= 6) Then
                retVal = "yyyyMMddHHmmss."
                Dim n As Integer
                For n = 1 To numberOfFractionalDigits(1).Length
                    retVal = retVal + "f"
                Next
            End If
        Else
            'No fragtinal seconds present, use format without them
            retVal = "yyyyMMddHHmmss"
        End If
        Return retVal
    End Function
End Class